%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: report.dvi
%%CreationDate: Wed Nov 13 18:19:46 2013
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR12 Velthuis-dvng10 CMBX12 CMTT12 CMMI12 CMR8 CMTI12
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips report.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.11.13:1819
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 645 2012-02-12 09:09:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.13, 2011/11/21.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.06, 2011/09/18
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  mtrx setmatrix TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  pop pop pop pop 
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTI12
%!PS-AdobeFont-1.0: CMTI12 003.002
%%Title: CMTI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI12 known{/CMTI12 findfont dup/UniqueID known{dup
/UniqueID get 5000829 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI12 def
/FontBBox {-36 -251 1103 750 }readonly def
/UniqueID 5000829 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI12.) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 55 /seven put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 88 /X put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5E0311AE44B83C3E
4FBCDB0B74ABB18FDD877252FD3501E05E597A77D142BED9940318B98D508672
4ECF79C43A857674E4DCF2556325CA8CC1C432E54543F706987376A084BF512F
0E4C517917FB1D607C83E479DD094240C3F309A57561CDF8496722F1D3EBF6FA
45CD3D7D810E2C07D39BFE08C0A25FD568DD37C2D182E5D30A7B2855BAD24559
D455B29B1F723BE1C4F827D72B1156DC2C1EEA76C9B27733FBB23ED36F61919B
4A6E8253C8C05F3D4BDC64B99B8494F7C37E9C19DB6A9CA8E9B0F9E7E3346EE0
EF416016CEE932E53A26599DD8CD09D77DF591A9D532AAD3E321CDCB28636809
E61D9EC969F2E27190A475407B90211902429778103D18665A681B0DD51F6E92
58D1288E2AB3FAEF05854938FEFFD3B4F376AAD303ECD28B23649E5D4C3CB85A
5C9CDCD1853BBF3282BCB5CF57720C6CF7AE468048D7AE5BCD2F15DEC1B33B5F
9917BF69BB64261CF101BB47A09E47D6508250374D00ACEC3E3FE8C5330AD9DB
9D9F60CC170F2FD6DEA12DA24CEA846E25ED6683A213E4FFD0BA239894C920B0
EFF562ED994A7A46F8EE2AF98F88317E513A06AB82A629979AAD3ACE316E7074
01EAD920A9E1D54E8FBD623773429C58A2964B498990E8420E5F7A45B3D4342C
1AC109FA67D4BF33C9D1E0E2973BB8B2495DDF5A7F8E306A0C712BD7A7FC98C7
44B26D102D3CD44A320FE89CBA6B3AB39627DA4679A5BB7C27276B34ED66260F
DEB659189A797BC41D05323454CA4600A6D840CA3C1DC31BB7FEE8DE367B8177
3F1546C9EA98FA9F7CD61F177CEC2950526D54A6E7A0038F2B20609E7BE31EFB
51FDB6829852937071FEAAA3A0E51E625D7FBF2F7C224467C7DB77F7AFE006A5
418CF691841AB7A9923506845BFE066769A01A51EA48840E898FC6FF0ED9C2A6
1DB61E8840029ED92A129D38CAFAD4084B17679A84A262D2F9376363D4B5E46B
1C94302E5CD24CBE93A27319A8F79138414B2E94CE6F78C6F06B544D5862C2C6
297EFE524BBEF0CC2C32F63CDCE433E19B52BF0C2C7064E3ACD429E2466BB85A
ED82C6EDC8AF5D75855B43A61504128F75C2DAF7F5C4405BE36C136CB809DF31
A40E0DEE80C10F6E6442CDCEDEF8DD0C01FB2C035A1D136693D366552862A421
81A290080EB8A3C5160FC2CD760A69F8254E8B0EC8E7280EC33802EC2668C149
73CADCFBD4E56A1E7A9CDA3F6A50E00AA536B02B4BBF4CE60B7A791098C3E434
B5A7F17D6E461FEE23C6C8C148C54D14345DECB7A619E56268131F65F86C51B0
E45860D46A1A798134AB3283BC8B73D9B39EC5D0C1241A85AA46B02E51DE6433
60BEAC76351AB35D8DBFD60C6F12F8B32E08C671E0269174E1E142E687B1C558
5668FDA480255261DC29288FF5ED56B50DD8512BD4948F31F14C71CB4F8FEFEC
DD8E4F4EBE9C28312640334BE454634EF26B5FD02A93210D487AA4F3AF284479
303995AD31F4A6DD2C2DCDED3380D50EA1D8743A3C6561CBF4DE91634374DE87
FED0CF17C73B49060648AC6AF2921D19FFE1B7C7E76AA84600078A0160160D5B
BFAA2007AE70640698BBBFEBFA5C11F351610023F563840413AF6934156D93B6
551069D681492EE73D480D648503801A921E37868B4ABBB013B628772DAC3683
3E44C318352E7700094ED0FF624AE560D2A783343B266FB925AE0D990B65F8E4
7A9725F23F0A08EFA08F81616A5D51E5EC31CD1BA229A89AB63ED782A6D716C7
1F00BA66A3158CDEAE3399653D7A29193760AD92F65C066A4DF35F91BDE771B1
74E17E4879428B5692343AA963A349064693B52F14B09C5F4B329C4AF4078998
D3F6C1046538F989C8AE84AE032A112C3E657907EE7A844B14C6A0FA8C9A1CD9
797E195186C478057525CBCCAA0FFB09F67F97E69BC402F6199B6900D9F285E6
47D359B1728728770C95B1A85E22D2132FDE7075F8FA1123F62504E53AB106D7
99B33689D55D0BC0C552745C5129CEF9F874850240FA6BF5F4779E35BF15A8F9
F425ED40480C60FE3ED85173E620320A462092834C0BCF6EFF9F1D5912CEB941
9C18D8EED5CA36CF2C7D3965BB0929EDBF7FC997A9CFE79A9FA9C54A11E1F421
7F3FA4ABB80A3C60E9165DBFB0EA765BD21846FD1260F1AA4644CBE05CEC736E
638311023F9F51F4C0166733A32BC1F615C8D9256E44BE8C2FFEC45B7B612FCB
21C52DB57E87EC8E166498AA8A4528B7C612E3BB8117D6BAF5CA8F9D038C1430
B7EA8699F31ACDC03774AEDDF6B73233944A1A89ECBAED2EFBD30DDF42821846
AF828EC54BEA6E7312B3255A7F55783C5D4AF1D9780A9670C9C7E02A50535A13
6D957F895D53E4E18A4B4263695DF2BD9626E717D5C3B80E908E59EF5D093798
7215550A5613AB86D67C1F89C95FBB0E6ACCAAB397479D483AEE4607E111EF34
2FD92DC7F991B6AE84BC7CB982D819A17022ECFEFFB981A6F678655A6278825F
0EFB5733C5F46529EF1FBB01C6BA7413BA9211251C0A70A470F735A96F6E0D45
DB1342D6B97ABC234790D346C74927F5C910F71918D615CA907984F0229E3F54
4F5F75AFF784C7A470DDCFFC308ADF6EF43979DD3B54C6A8DF3B53DB783B81E3
9C57413C3A317419C190F207720743084DC20288C1AD08B8B0FD4ED805FBA8B5
BB874DCE4AE93AE3B8A117612787DA6C8C7512191BC36F6D8AA38F39099474AE
CD570CB5570BBA932C9C7A63DD386CABF1956FF87C266BF145ED5D27547234BD
943841047FE9A41C24B82FD3D3EA49A56C56840B1B359FB2A3F28E10AB09AECA
2FE2520DEE9B5542591E72ACE610DA4BF31C6E204574DC78033008F019519B2F
E45C99F1B938D212602E824CA1CA020211420C77FF545DF586702451B0923EDA
CA15BFF98CF2F0A56404591E57F7C89CAC6D22E0FEF9094770CF003801E5CC08
110B272A50805F89C0BB5C2966B9385C26F4A5008AAD97A29408A5116BE613CD
5ED9F85D2BCDE96FCF3121D5EE1D455A4CB03BF2AC33493FEEBEB955EF737F7A
EABF96C137DD84B3EA39C61CE95B5967405CEF17D9CF1BDD1199346F95E77CB8
5FA2D38D858DAEF10D0DD660211C8C4C69EF58B60DEDE48DF76300EAB8F0A547
6DBC87BEE8DD4EDFE3020BA56F362503AFA62D8C13BB270C3884560E227AFABB
5D810B2B092531A679485FCFFB88BA8313646B644A35C413053DECCD4B371450
18F54701F610E52E727AE8D25A8093B60093FAF775B6414F66F43F517488B4A4
00AA4F672A34A73531218601904A7F50A045E80CD804D028EAFF506EDA1ED998
ECF16435C6CA8E203F2A813506F4B8CDAC0A3D69F4B704AB80F170EC87B7C732
AEFCBA3BF4050A9CFADB87F7AD4B53BECE197C10A2E84571A640328B90E9A294
73F6CDDE4F4AF9F1F3A257BD130454CF95D390ECA95FC4221D5041E71D65FC21
8323BA5A3335E2E905E33D5BA56BBBC9CC30D25764A066D013B116E693C56762
4F683F112A572C2C04ED041CF7BB4FAB0D899B3F2679B431E8993A650184CB4B
1B391B39929AF803F868245A69C964B560A274B07DFCB88A6508082DD6092E38
80D9187A146B60B225CA22F593AA6B4B7EE1EE41A0D375C4FA69EC6C8E02B54F
B855D385C973A7223DE22465D039D213315C35F0D079E8CD030F62993495B2EB
A0F9BA98565F89D2E09BB60D90B0CFFFF1F0845810ED27CC8F1088F74D48A30D
7FA0728498E78A381B0169B7678520EB5769522BB5838212D32C8C1ED5635753
EAA3C14E6640BC34D43EC162711996E0CABBBDE0932FCB6B2838C22C0E42DCE7
1BC85E372F24C1145655D59CCD50EA6E1A673CB0342BB744A43EA1B9104CF736
324E367D82ED67E01B0608294A91386045C1564E4E417E1A62EFBC148C0B4A56
73A98AE2F2433164740B839F851F9C38124B3C01CD976128DF6A06FEFE14B960
4573E748370D70F9FBFDBF875584852E70264766FA5CE893F74D0D5884889178
078CB149821A743D797E9577A7D27E7ED607349CB2CC6968A7CE402DF9A55069
4A985B517B714C603F993944CC64083DE3D5F969F9C5913C297E8493D310CA42
795C94740A5E5D3415CE7B4A5AA11A940D93992329D8B00213244405BBE73958
37CD65B6AEBCCB2263B937F671FFF3C6314D400983E5AEB6A34709D854FDD0AA
3D27A62BB23E253E6E2CA994294009B857B5F1FFB66E772A0BF9D83F4F72B89F
51B125AC9E495343C9D84A4BB4759DA4D2ADA38A195C7905CE288FD8634ED996
9068F0DC8DD08F3D3A1288A271E7F7EC4AF76EF6A78C47BAD95FA14A3AB690E1
19A13639774593D77FC1610D7F1E25A31AF94C5354B35500B8E57B0F65AC82C2
2A519581B587F5E3C941734A4269842D38F74E89C2AADB8ADB3D16542B0485BF
BD4F1EDB4064E96A330D735F73789614C8D606DC553A0A2409CF4C595AE51505
CF203817971BD7F9B3346C036A18FECA44CE1C2042BA4E7FFA3FFEB6371A06F9
30082F47FE87B207E13A68BCA122968AD74CF6A12EF6767988F0EB0CB64981C9
30D9717F6C7D07F4B37CFDD68EE4480C0CA305AFA4BD21DFE131D6715E839973
E1271BF576F70C2F8C6827B3EF02CCA123EA46A02B2722E06078C3D9B3743CDE
45B43B561743264277D0D1FCACDDA80E5C6185E90F82D1DA4DC076B6BE49D2BE
F03EF513F1861CF66D2B7F8D52C7A5C21DF1276B72CC1CDAAB5A16D20722A95F
8B1EB6E6B605D3878831204A0EFC95CB3C5B588D4F0A540D466D13B8468ECDC1
DB08D36E7FA19709A67A0FA08421053EEC9068ED464D29BB1BEDD0BA88882707
9F41334C3BD3F995321711B6ABDE3C12A8907F930F7AF490D774A05398ED03D6
789D91B4DACEA3D8EE11C2CD850A6EF4128B60EDE9BD37710F43836EF6D53FD2
D8123F81EC6F01A93A8B36FAE49692E7276F7CDCCB09F332ECE359E3E7DB2364
A60B192438FD158B18CB3EB40FD28F74A740367F02D5CB6B53959A0D11BDF388
9AAEE02F0E96AE2F802FF08BF778F26DBBAC8F5AA04CF3AEB180235BFDE493DA
4D0B13E0B61696A8ACE4FF7A09956A1896B2875E5B2BDBA09DA08B9589957E85
51084D76A00FB728E286CCFD2F53088158005599835B18F6F5AAAA6051270AF2
59F7BF641B0AF4E79F4491725189B89E57CD10B442B8EF89345D04EE3E18EC98
217D81FFB1B473B9562605F7B0AC3FA8CFB798A988E5FF20F068A6B2399C71B8
2E3C19E58601B0AD3872170B0AE8FA33F3A50EC5E67EC22C00D3DDDCD7B592E1
0D1CF31DAA48D10F7C6A56CA052A5AE914EE08CEE011FFF20D00B46A7738C434
D70F1040C611168D2C1851DBA89DA526428E6D5DDA244AA267AE3559B0C7DC8F
AAE1687F823CE628AAD59999E74DFFACCF7D3412B466F6C3A315D8AA3350FB18
9EBE417717C42F3201D19E1870A2A3424E96F1A9734F32E85DF220E08C4DDF8A
AE6F3491A3C805578924F36C146CBAF1D38C8C18D18E5A9B38236BD3E6B9E5BA
595F66A2A8DE9F52C9DFE00ABA5B99806A87D2EA39EF2C3A8D94FBFCB0CB5345
9AC36328B89AA13E4BBFAD70314009B0A2588847B7092C9EB938DD069CFA3679
73D9CF01F9756B931B34E70F4A5F1C41FC577515A5CDC49FE2C9A13D62E7E612
2AA5969248241BEAEEA5CAD34154EF5F9153D85ACD6FBD6B7F2834BC65C77E27
5ED803220949B14126BFAAC7728CAE16EF205F408232C5D7B83AFDB9C2191997
38005204EF424640DE1163B577274FB455EC0383BC6CC17F35112AB638743DEF
9954A5B2DF6A50DAA8662967E8E2208A9D1E3506309A9EC4C001CF91896E79A1
F3F6FE998DDF7C7971707CF7DF7415F6D42EE28620C0A225A1B9E389F397F972
552E566F748613EA1FD417CAA7B90A2BEC1AB07F44BB8AB6ED829F2D7F4DD597
989617E6BEF5E701498823382DEFC2D5FD078DF888DDCA99E62890AC0E5BE8BE
0CB662B561A49D2221847151D203457C797A904BCB5A1D68A51EEA20A167047C
36FF0FDD999E46C857864D1CE7568CE9518230418124EE5E51FD96C0FD8EB7BC
2A49F49AD72BB71F849B112147271000A77F41CF476AD687E6BC3DFDDE0CDE1D
ABE816BF31348D25FE0A11FE7F5559BEDFC24A14F91BB73BE7F5FA95DA24D705
3DA96E8D05B84A1E5BFB0F15D7D4638CE4C63B74404128CF56A016180EAA054B
85FEE6937681557D0B5BC3C560947D456F48D7F4CB7A5EED52B103281B152E3F
ADCE8B98497B74B05096AABA261D2A2EF56572904ACE2866C6A081C926BAC3E0
DE02EBB63FA29197B3812809F08A9E3D5ECFFF751E60F7082749F57352040E06
CAF9290336395684E85FA2446FBF1D0223F74B0D3464B06975010B83D0975181
3DB6C0E2967CFBDAFBD555018305184953487AFAE112D36E696DB8A18F3E3A74
C8B123F16D077DBBC85A226A26D406F622858EB7F1646BC0093A7C9711A1DCD2
6302B0611AC20A3870195D8BBA4E8E4F2CC73030B2354308CF8C06D68DD7FA14
87CE9D6FC7A8A356AA2DC356231B4993655A0FF55AF67090E2947C2B7FB9E96C
EAAF52A01ABA6D69B738D6E3D4B2CF1E037D991EB5943BB0E6AB3868138CBF20
A112805F4CC00C65A4BE86D7492C23E34CC0BEEFAA0403E2AC21FD33D7A7FD09
9DCAC0BE550881647B322FE5806735FD993F5ED7C62173AB29095F67A626B9F3
20829E4788786C978B4BC9BAB9B3A750F130F9D4AFDA6EA3A7DF09D7615951D1
0C783A653F0BBFC23902019BA276A6D7944F1A34C1EC7E2710091C0B94CC3938
01C50C5E4A9C19F47D69074023F574D7A7302565EF9920A8E2A5076E6E3DDD2F
409CF1AB8BCE348FE63A136E03A520DDACA32571675AEB94D761B7B625AF1626
8BA9ED761E12A52C511890DAF1F790857C3C9FD3FD033A8330CD8E19266FE888
76AB1F3B3C8BA1FFCF3A6CA570290FC1640B6C4231D8346BD346E647D138B2B7
F7861E2C7C7C4431E3E91E318BA1DF8338AD4EB4AC104EBE7AAD8F5A09E6AB3A
48B9EB51A85277B221E3A22AAF38219B681918DBBB2F77FA8AA27F310159C763
A6E66D93879B592289B919B425FD7A367B7820FF430100E1EAE0877F84326FCF
5F1DD99964BC6BEB63528D2B218CCE41024EA2CE703959071A65EDE99127EFB8
0CC01566E5E52DB32D01512383A7711C7770AE17A71E5D95629642AA79CD5F01
D37FC89696F25C2EE4DD70DBDECEFA4FA2CD5D2F8ACE75937D2B1FEC7A31A893
16D314D800AFD3EA28068983A2ED3A7C75A5570F30A2824A47D6A789AC554C3C
A78C2DE9771B86F73C66EF8E1D0FD046DD4F19A31EEAEE04D5F38B73C623F326
F146C7164C9B18B5EED2113363092ADE0ABF0D7BD4C10BE9766F81C34878B236
1A0FD6D8AB4BC7E3C01F1C880C3A9186E4006210D22EB64CD7690FDA750EAE7E
C87A9D29128D49082578ECC0BC977D91E9CBB1ECC0D3527DC0ACAB39402015F1
B067FC5E7705586D97E81F8911FC2BC8E7C077384AAD4DDDEDBEF65CA4B75F6E
39E41528CF53CADA928537D557B518BB740593A6E4D0100ACBF126FF20888342
A0D3D7C201C4CDE8CBF59A1BA4F924E4EBC3E02883D5FDF2C8249AD8117332E1
BB52D2F621115C0F98037D4962EFAC0FA86B14F3C046A1F7085E40E99C0F2841
8B2C299411F9DC8FA0C8C7E5D7822A10D31D881F6C47B6C47CFA943FF9A9F5E8
D5F1C3E6CCFA324059B942FBA2C6D0E9A3D080DA0CD80D8DF76B0FB6BB706F45
C84054E62F75294ED126A95DBB4FA2D09EF80D1F2C507DF980D3DD2BFA3DBF49
6A99DCC954BE39E51507B12ECDD92C397E82B1E979FBFCE731CDDAE1D9147448
8C312DF818A0E08266A2B60C9C0902AE64276F7A1C6D7BB2EDCCB2E3B7659B13
AEA47A527FB302716624B48AB754218E2E3D99115C606CBC90B5EF73B9F99439
6184472986249C8D8E52A404FE76E17FF814D5BDCA95AC580B44DAE8C593939C
9E7C0ED996B9D2B8118F71BC2F0EBBEA6D7E18FC7CCDC78BF05A034BE39DF9EE
C6BDAE8886C7058B15DABA55E85757137873AE811F25AC7EE3A0CCB8649F6095
7249EDD95E20DF06719DE1E109E5BEFC2A4098E77020110C37A90B5BDBF09654
0F72A7AA528BB009E0FC966D03BF5EC2AB2F1098DDF96570BEA964AA4DD23BB4
CA77125EE9E9B08D4DA8DA162FC30B942382AF49DB8929F2E389124AB50195C6
3F89D5DD6407BB9819139AF180E4CF0B082366145BB4737391B84A501479F6E8
27F0EE0653759A0886A4991B876A60ABEEA81759032EEB40699074E7A8CF8030
CAD26310FA1CF769F4A2A6DD033D6A0D6B23E5DB49393D39084762F438434994
C47AB7907BAB2C0CA1396810AFBDF336F4EFAB61994650ADCD0108332ECCA1FE
2CAD384E7FD3B3F42DDC493777D76535776B17915AA9378BAE94C1DD03C1DDC9
43A22506339E6CD7200BF484799EAF202DA9262B7B237795BF8F8EB78D4A0438
B5949941B0872071840031CAF9B891BE0A3C101DB2851C2545963E6826BB910E
306AB30D4F57C03CB4C6C4CCF76983D46E5742C24DE060F7D4771B11F60580D6
9FB8F65744A86FA724164309241E18489116B2C63690C6D5C9CF412BEE84BDBE
A5168472ADE2FBAE502FB8C18519009F1C7690A1E3C1BAACDDD2D8AF20FD4491
D8D84C774D8E35B2B3EE9E201C57883CA2B445921699439CB4EDDD2359E33980
E6480C667CE021CB7555DD7F8900F3473CAE3177A1F945E1AC22B81DE1A86D16
D0101D667F1DCD954250AD8914DEBCBF98B536B57CDC41B551A1CD29241169E7
A66E29686A433A3BAEFFD14F8DA1C279D19297CD52B654D1E55E28306C04C9C1
C54DE3155EA62E9945146F94824447FDDA1672ACD485E79B3882E40B3120B0ED
8C99CB6E60017B4E5A7B06FFB15AFE060C0251D9C655C72A4ABCC3F0A89445D5
0F55BE3E7DBE62AD905726E471A25991E982CDF8498388ED09275EC6DE9ACBD9
72D41BC57E85FE441665B57EF9B6CF489AC7EC5BD5CC84081911A5766B812B80
958C6916B77CFC4A4F2BDED0C8B5AD8D611518C77C8F14350C09310460C58C70
E5C8DEF0073B29E742926098874945505660E64CABC50BA341D57D0FCFEE0AD6
6EF0679FD90037FD9A11951B910BD0FAF4FB2B06A0596C2153E7D1475B5CB168
E87436DE7F6D555387D0A4B6A4CCF5D8982EF676ABFBD9420CC01AEE5AC13A08
E455CF09BE1B8D7D39CC8F5CDAC5F57527B6B20F3D9213795380E589F9183A27
742FE8820FBFF5566D0CF2961AB02882A04D4B7602DFBBE914AC9A4E888C85F7
FE8F7352F0026877AA408F0136324B5A16F52A55BB5815A2EC6C6D17B243B95A
59F1FD52F6A4AD0177C8C79B30EA5D28A670ED50A68825DBC5D602F59862511E
0E02053C05EC7CD186DF26D6CFA6DB8F43CC580213BEB5617C055A42BA68090F
DD2CA6C981937F0768122472DB501A8D6BD3A17677266AAFDB61FC7A9068C124
6CB490FEDF0A804475C020ECA73724B6E0D26839D4FDA81B7E88E7B11BFA555C
6CF44726EEAA3B447C2AFE60B1259030001146306A613142D6520C406F24486F
B4084C50A2197D95DB8D71B5F213A6D1291F03932E92CE53DC3B7ADDFA2BF0DC
1785AA246155ECAA42841CED2199443316B9892249FA1B21C354A0E014F8E291
C067FCAD10A4C4C0AC1F27AA06FB06587BC8048D936C274C19D17651C4BAB4B5
8A0D58A7FEA0606A39515A09A17DB87F8BCC06C06192F9D0219ECE4EDDAB6A38
A7ADE05B9C035235B1F5A8A5F0913B5C6A9B818DB0CA8950432CB6D37EB0875E
29997713CB5752F1A66B80DE7F9E7369337ED744CD415EAF27BD7145C902E6FC
D10DAA41D9AD3349225E6B8E620F56121ADFB9CE40B678D7184CE7B2A770E298
E2068F40521AE140B8B716FDBE10FCB79F5423AE69C183DDA6A14FD00437F8CD
9C0FD619663073044DFF3414B5B50E48BDAB88714FBF1963FF0651522ECFAFCE
8A5411780A157893E492C2D8427C99FF68216122F4E1905D0B37FB76CCFE4F5E
846AD19767C2AFF788C829A3A3A53395FFEAF42AB0889D881F064762B9B50F5A
4330BE9A1A11DD788A4222EF33CD49C1F98AF44E783DA9E23B5CC418DFF04508
234EEA16937F7DCF855C7E063041C15932E484F0A54F8DBD835BE61F2B5126F7
8C0368274F5137E158FC5C53A2B101FDA7A76CBFE5FC384853E74FE65C5B3FC2
B59108094C406E091F1955B30A5BC3DEC62961329E491DD2FDE7988F90BFE8F6
8ACD43867AAE1F6A836ED3499766A0D3E0945A3894A68F67050BF92316F1AA27
25947787AC3ECC60767D04D9076540D33F29E1134F92F1DF57BA13ECAF3A1286
051A2C3C518C91446AB98CE2D26B376176C89FE73490E77139DA4936910B97E0
D0A633C879E756296BB70113F5F3DBC96E6C6CC164BC2A22E095D6EA0B00226A
1C3D91C159D205AF26066E52D893E5579BDD29D94336D05BA4ED3942041ABA88
A0037E96362ED1B7BACD0B7871B34EE493CD74B33CBE7AC9C2D29935A17E8A9F
2C8461BE10BDC0F011E2C7D1A6C86AD2BC67E0A2B2ABE4A8B54B457D0B1F17B5
2F48D52D1D2E8E527C1EA7860FD88A703FAE723AF5C6354D0FCD5CAEE1B09B96
DE63F8EB3C55472783D2C4190A9C90171AC443060879EF853FEAB9DE9F66CA1B
68A1F37B22EDF2F45FDDE968FC9CFC8F8F64D027F6863445DD954B4D89F5FCA5
CD693CA1DE8A9B04E365CC9AB2D350692359F70489200D9C1863A2B37287ECA2
966F703052E44F03C56071C56E163EBBDF00F3636C70959CCE6AA7AF256FBCBC
1F8FF7367B8A97917162237BEC04A9DA3758F48BF9120933C1A3391F84343DDB
171D597FEADFE6D5C02FE47C34EA1BE8938552101587753E3F7D091B364249E1
023ED2ACCF31A0A7C760F30573369BDAD4C513545C54C649A3BBFBA67C31CCA0
87BDB9BB3DFB56030A67EE7A4A5D042EEE331254938AA71518FAF8117718A8C9
41759EA384345963B9B4E1FDDA8D729A08AA044E86C59C55E18CCD393DFF303E
B43BC94D365DD06079E627DEC8E0591068F71025ED51AEB83A4B37DFD116661E
5934A86283CB503469B0DBFB38E18B584A8144B026F3C364F2C175F40E7AA636
8A6F59C6526781B2D39D8DF563BA890144FF3200707989CDFEE5018EAF82558F
97E5379BBD07EE1778866725C1ECE7276C8C08A94DC8F2B0E8085AEB6C4CA311
C7D6484484756608E9D2BB40423574A3D3E1FDAAEAF7416AB7C7001686816964
6F8B03DFE21AF0CABC437B7EBAFA7D16CD87C76949BFED95F64DA5007B35D431
F3AA95499286ACED0BB0668E2FFACBC5F250226C43BDA8C18DF1D6B51D5470E9
13471C8EA589259124CC697CF5195CB49D93B5F035D4903B4E2865808E3E3999
B7A055C82A84B32BCC9ED62149A03663E7E616C48016DAED11E627FAFD2F6117
8A86AA8D3CA8680B0F40E9922292FD838B91585D7DBFB6B102082CC66F2455B2
7E6836D9B73B60606A9A0DAF904253B076358780D154B4CCF837083A2BC89A77
A37538D7796FEB2F7BBBFEC819D8429BE8057B11181C15E687466591A80BBF6C
361B8BB22BA06D2422CC69D601ABFC1C66215DA8781CBF953F7F5228E569B6AA
C1FC48DDB90A0DA5A11FC056CE1A01E6EE8393E4139A1897CD44988DE9E53CC7
1FE6EC8E3A3EF496AA16270EBF214FBB1F9E14D7CF6830631CC0BCE2584F965A
9CA8537EED9EE8FE5FF6523F1CDF508F0C2760B95C41CE5C48D95DBFA1AB62A1
2CFD054F01ADBE5B08AA881EEF997EB4E05DE3356087761E02C5116F296C3991
E566EB7FC7E62E676CBAD03EAAD0E9D4CD6769B2058C9A6B453E329578651772
1C247EE5D8F23AE54F61DEE36FB6F5D4C323AC57908867BA9455BF6ACB66FDD4
3C241021B840252750485AD863F414718005C4937408A520E1C696CF2DF8CB33
E585C81F5674A67BB4405E45F4807ADA127A8FA27A7884D15E8DEEECDA5BAE0B
2BB6AF9D98B79673533843DE8023F5DA842ACA52B35D7B7F6BF0F8691F19D255
71E0A1A05A3171BCED1BA6F746CDF5802F412B2F1F573B6742A50AC3CBF9B424
9BB74C2234E7A468114A633B253C1EF403FAAADE1D420636E3207FD9ED807A9B
0DE0681DE4B4A788D90AAA3E1F12F1A17873BC7B4B4ADB474D8FB2AFC2E50E6E
DEFEC1A55812F2BBE1822D1DF5D77D9D6535E042AA34DBF59B8A5B351AABAF53
6F563F87F07D1F5C3E085F09038B2793362E24B094E9457328A7244CFC41A9A5
65CC8CCB6B58A397547E10A1A5FB2BD261FD3C48711D28C870512F628D997250
D288BFF11402025295A194A383772E807FB454FFD0AA5E27C0DE943909BB27A9
E85BCF6900C71E79547AE445B03187EF32C4321E342F97961DF69D9B4ED30DF8
57B1A89D4DC148ECB0850F4CB35947B40DF7B5384C7F865A925D9AEB29FD540A
5E024603AA71BD17CEC35A3E5A8D5D2E50E9FA09544690DF2C82A136DA541452
A936C37CA41D059FE86BC090EF1D9CC2A3772D95D470D194B74E3D6B4594137F
5AA8C20B8DE20D91DCABADBE7172E269E509A3A30567D7B80EB7013831F5B577
89C0537D026101F5A6B7C86EEFEB9E1781F9D705BE26C62B2DA5E25603F3031F
D1B2CEA2B6244FDFC6DBAE39034ADD5F816294EFE2F0C862742F9A5F88599808
F2D91B169FF1CBAC6C1DA87EB4EE73EFADDDFB8A3AF2C65F43FD59DB3F7FFEDF
84A4A598DF2D359216716E29039804D7AF84716C970D9ADF02F440B637B25F03
FEFDFF9C3CCBB5DADDB48C2C72DBCEADC375299AEDF08A17D4F2D31E6E6BD777
1A2EDE2B4E84BFBCE69BB293C33CE44515584FE8E8B750684E8859E66140A1EC
AE79707FAC76EEC86B65B6C26F109CDBD577CAD8B8B5FDC4848709000144BB45
A7FE216E5573491FED96D6ECF8A3D53834D3D97E1A452053753151DE639628DB
6D11039846C629CF7D009951D3C211831661F9AA7E06CD95CEDCE52B15DCD365
64FD4C224D49829E793E9E6B039C88B6F75E7594A5738A91885D467785C39281
84250E0A1466E8747A4484F213BBCCA8FA93748D002F5506BFD067BA05260F90
C629604398874B1CD927F94C124B964AD7EB3E3D271D7C0FA22F8B2A3F58C197
B1F1F1B325CC3B338F7599A61DD464CF7823B52BA06FF5890763CF5128032DB0
837B76195DA403485ED0A125F2BE6E4C340725DE5ECA95AE0925EA25C4EBB50F
503692D0545996CA662DD5E4E73AFCEEB1DD097C2B61CB4D086B45AFD8FDDA46
A8BAC25A404DE7A00C2784AC5B3AFF6DE85FAC4B1A4607EBEA45BA53D0174DAE
AE78223C90682CF10066E3BF17B3E5CA9548D09DE3540FA9251DDB637C56E7E1
B2CE0489C064D6736C5D7F1CC3626748DA3C496CA6FE39C1452504B74CDE3680
7B0FAC672B73B5CA453B7911833D5B31435D81BDC70D8CA4BC18677E6C9A81E1
03987AB3023C60E6FCBC1374980A0851921A1401A184C9364745D99EF0F8ADAE
2152B6CBE1653E2AB8543F6C8CFC714EBE01A5AA954A807240AA49C547B8A5CF
52D9F544B068AC626FF755310B2F3D19B4A138F50170B1D4A2633981C672C7C4
567AF0478F8865F492017D8A932C2F29FED0C35772C44A2B7BE6D94C2BFA6F0F
CE4D555A100E27B7961EC6334C733FF970A3C6065B0CBAB85BE78B2E4D8CCF2E
73CA403EFA6B3B185B950A5AB8EE162E4942431023BFB336CFE316A073816E26
10C30C153A0AC541B548F60C04C619279216F77553B5A50B70B9746D5724C0D7
444FEA29B50C25C0C5109D7493E57A16B0EDB3195D8D2F926E81B2C68DA5EFB8
BF07D4480FF25CA38D2762F36A448E8EC1428EE39884FA04C2C0E17570E1A5B7
8A36C541D68F7C7685A0C1D58CF553BBD3A8CDF209D7B2549D26EC915C5D9436
9A44561CE4ACD0B2EECED414BC6DB339A6243BBEAD14A7AD00367A2540D9625B
C4872BC4E6CBAEB1BA73A019A51E3A46C14B216869ADDC41AAADB6D3CD617486
584987D5B04A20CCC1040D3D1C6F7D4CADC8726ADCAE7E8D041FAFB1F1475886
63C833E4AC7CEA5D984804C5C63B2078D4CED401993C1A2BFF1FA51FA1A4470D
66223AB9C4A6E16478E14824084A3048D9EF866F8FD65F79217B412D7A109ACF
F16F32676733F22BCE3986721B016CA722473C14655A419D22B2C0A724D6CE08
9F543FB948BBCA58AA59E31A06AD4514D623C30C8E9C52CBAEBFBF3B82D47CCE
48F49F82A1ED4D383A424766521AF87FD6E90C09ABB3185EAE9DE2D27097B091
DC0C53B56534D177CF89BDFA12AF8993344A3AD72846E2E767C3DF1C3337C6DC
D8D5A8FA95E43DB6E80018E227BD42AC151F09CC38BB95F714C08F8EFE1E6299
59598237A8B00080F540BE0AACF2863AE041621DF2433D679D6B2F18B73093B0
92FEBDED2AC1C4B6D651001588AF2533A162AD6F010E63C80F0FCCA04CF9BFCE
AC927549944AF210746A1322C6A8A2C0F455964A6F5D88BA72847E4092C2D3FB
A935D925AB6F679619AE5A59DE9AF9B8FCA53F556B2B647209CB32C9FD50341E
0B196AF9FB6371B8644E05807098A99CFD9E84632A4F82D5DB41BDD331983549
C02EC450046206C49DA78204029BCBCCECBA82EA9C8363C5769B8F14ECF51DB1
69DD8621D2C62A8482EE305279ACAE4B744B8A4EC77B0D3B68433ADC0A582854
0EC0DE5DD10A9C431569B0416EE0F4BD296FBE6BE279E901B1AEFB3688ADBFF6
028089937C0D2754CCE252251F212E2BC989EB731C50F12AFADFE965111DEDBB
6E7777B4195BCBC76CFE6F9502833CF901CB505FB7E953D2D421D77EF2878AA6
6E7082892104FD21EB1A1F0AB897F9372A5AC15E906237688DB34BDF424A2A5A
A67028879313024509BB2E3FB67F5DF6365998CB7BFC6A6DE8A883F973BAFED4
A6D4BC2E70DF5D05DAEB62710ECF464AB0B79EAA0F4FEC4D40BBEAAC3063B03E
3832016E933F424FB272453591D2F84DB62B860E3C7A1CA1EC4625EC3A15B4C8
32A65C7C8CD2A04169EB425B005C0C40638FD9B8255556CA97645FDF00E905E1
2B08A47B9E3343E262261F3DB7891157795AA5A061E1DD9193C2318841525FA2
E4673135992A78DEBDE987CDB046537A76A1BE9F64104D6275559A2EEE1618B6
7320E8E2C1574D3BDC99A1C6B1E870EB84A3A3F3E06EEEDE613FACAA0A7D229E
F49609352137702B0842D1FF832C98FD67BB3B3ABAB4D1C8F07CA46C2367BBB0
C082CEE5CCDCE5182D56F7A125D4CD404989AFF96EE8E7E7C7A4DCD4083D9BD9
5A82E0B77AC7E5249B2F1B27D50B5F8E93AE775C8900A4C2869F9EA38F36D890
BA39DE63579616FEB0D0CD7BCBE5B36797EDB465C2413850F267A0645CA5CD2C
5B43628410EB90D046759F8FDAF9080275B62BD36AB1A3777485368B852FAA7F
50A5939474098056933F43053E7E24A045EC37BE4C8CF69ED58A22A8248CABAB
755A39976E2095A529C647A778DF06F78349F788C169B0BCBB395364D603A409
CA8776CB28E60430498A216C6D7EDFC538731FA25034E9F4D60ADB06DB0CB00F
75EE59D53B4B3405CBAA8DAF658E90D9EB2E53EA8CA933CAD236E7B9C04DF01A
B5716D98521AD866EECD987174D86844EEFD9B76D1C9191C588517BF8A7103A6
331ECDB6F11255B75F65768C9CB901EFE52D038428F9D6E961F0E0E6CE77B1C2
3E99A30E7754B1F9182D3E6974A422EB54B0493F7FD255AD0E8264E5990DCB35
7C2B263BE4F6F6C1C88032096E519EA821630A52CA97BBE0C56A5324E93792A8
E9E2C52D037B206E5564E3046E92CCADE0F1BCE8339FDE011825E2ABE9CC4E99
32D7AFA275FAECEFBAF805284895F269D5B7B3BF7E586BCAD8620410E3F8780F
D22566F7A1D5F5E80BABBEC8FDE7DABD4FD23F4D2D3B895CF727A9949150D327
F222C099F9DCC2D006A993626B00896B5DAC3D377E68A219CDE25C3659461061
1E3FD43438376DB9AC19BBED319211A2664C0915CDBF6AC79320DB20CB4E6B76
A5116DC09F71FA67FDD8FA178B3D0F38355D455B090CA360E8D506722B5DB0E9
F1F780F91EF7461EF6A0BDCCA82502437313B4219D6EB94184FD019F807EC60C
F3D2D558EB319D5F83862224B6FC4FE7AC2E4D45C4A3A86D2FE1F54CEE163154
CC5A7A46C1D1BB2D3D9AD7ED73F23F9BBA47EC1F63131052E1D153856A02A80E
582396D607A4AB4B7807667091FC0D969044D45358EEED728D454E298812A8A3
B6B751E02E56341EBE697F07914B1DE4F00735FDF249713DC3D0C77C8E126863
722CAA759426E1A7182F3727BAF1D7C3E8DEC52073BC5E066151529E77D27281
E5D56C9481CBB23F41547041B6E78621C2B27BB63232F92AA010BDB1EBBC5CA7
8CDE30DB4F419F6B49CCD576CFCC19595594B59D1D0C5CA713708FE78C570E32
5C6F39B2E8F9CB71B9DBF3A75247E219B8F786A7AE81DF8084B48EF0DDE06364
B9641B7238B8F2F2263802C0435724E6ACFA6F41E2D0F86F24B29DE32EA6B940
59928CE6345D7EBA97595E25DE713FF9B81F8D090C084C7591C2A90763BD0A6A
2192967849CD44ABE26659873D2DE60D23BDD8FCD3A180A717FCA84E5EF82AF2
70BBAE4F65771528C8971E0003F640402931B74824F6B89C3A6AF3601A031514
47BA4A30CB296EA45F60C650586583635072CAC0468704AC5AD0E28D8A06ACBA
CA1D179AC05D5E50D2B882D0D1314393BCD3CE6B5C7D79026FEED46E03FE1C64
28951145DE73F1E02C23F7D431E11EC5DD6F9CDE0B66A88411C9EFE70A9ECD17
B2A50B5360FDFFBE6201E99DC0CA968C19D471C5F789818EF232235281A105F2
73EC534B7EF2D6AEFEA5F737844D46070B1FC7381231D236BBF2C7F4FB4770A3
B5BC3DF92126CA8343DF6265A920914BFCFABFCBB3D7B6272C02D5ED3546EC20
2C2A63D7B88B15A14C5DF644228D915DBE5087EB9122DEDF70A52528ED77B6B2
A6C6533515860B311923D640FB004C6C31F757C708223BE496D1466050142EC1
C5B62443D65BA322C2E50F36178C174E0AF8E7D9FA588DBE117F6B8639FF0E6B
5434AD1E9275E63F481B5D45CBF3C7302936FDC76C2278156A941EC76FD9654C
94282408E36189F725A2039978A7A2377E1DCF892719668573A26C48A44FA675
6A7D615C158A31AD3AD47EC2BE1AF2039030B97E5638231558335EE37B1BB2D8
8DCF7E64EF6F5B365ED47AEA273F632376A8FFFDB55481283D7BDAC9FA290E12
C293BD008C2643E9409495BA9C251B20510AB69EA11EFA1521826F2ADDBFD855
4A95571CA2AADFE925CEE8E51272E2F69889D4F117C0CE9E3E8F7A6379E94AA4
9FFA439A1B55A05835A3C72920B96622B4D34229D08E5B1C8F36AA4244BE7BF7
29F2ACECEC04C06131B9C92CAA4317E721C35905F614F3E6B825F8614676FD5B
088F4BB5EA9C3ED7523442535344B3DB12F58EF3F8DB3C30B677D4E3C44CF2B1
0AFB1712E2C58DD19FBBDA9EC13B4614022B022BF9ABA389BF777B498D6E3868
3D5AE7EDCE3B6C6F33AAB132694160C293D48440653FFE370E7563EB8A18C08D
6BB826D27B2F4472A6E57DFE39BD3EF29F3B5FB810A59782E8A5FDDABF988901
F2D08746F192EBCA9511CAA4065445F1D47C4BA90F14CD427D9D391599DDEF64
97A2109081658DA2D679A4E5B995DF99CEFADAE921575CF47BB37364544A451F
651F4231232C4BBE0EBC3F25A9F859D7070E7C5C1352008FD5B878FD42F6839E
308F7F411034FB6E5B1D45E95A3D027E00C5EDD9A8D3202A7C02EC512486D0CB
051AA8B32EE48B51D70D0ECD4A6D0C2178A450BA0E0685CDDADBBBF6D11C6029
A6F5CF67F908460750FC7C7631423DE3C7019033EFC31714F2DE5B1241B163FB
4A43A3ECBA1CD07A2A5704E26DC74D7C078E9621888447399A7E8D836911EDCB
04CDEFECF2C43B5EBF5AF1B818B167649DB0EDE681122C7620CC74500B889BBC
E899347659181055C52A493AA88ACAAAEADEB93F24B7227C673868D437A22C2D
69A1CD7A98CAFB57FD354EEDA278B372CA5A8F3EDE7826529532C06C8D1D8F82
A8D08129793A44415E2C941F291BE9F0E5AED4F32AFC652D8A43DAF7877D4F07
8C08923E1E8B4B125CF6EF25B3B13CA001209CEE7A2DED7D5CF2D0CB14139E0E
051DF3F302156349887CDF72F287DAC84326E134B4133897D8B07E010D2D3515
AD668DBF98099487F5C85DC354769D2229DF9843C47C2674EA2FFCE585D285BB
9BF8CA07814A1164A218E5EC56A4A951D4C27ACC636DA6880FE2F2853C9E50D1
08A802E9C914F0BA4E37B693B126BD115E40F340E968F10C69651658C47F52F3
B374085AE76428A7D84C4D736B2E1A6276AEE80D8B19C0E06ECFAD2F03EC4963
3D51E42863644DA87A6F21A71DCAEC8FAD2F751A8CF247612D39E74CE917A5D6
73D7D88221F272ADFB5F3F136BF21D7E55494CECAC72FC93EC6B8136316832E4
FA7318917D4E4FED373365369F5750166C762F66FCEBA41C96D96DAC18BE61A7
2469E1D014CACE24CFC76F7C21BE3B57531AB810E82E37B12AD77422FB24914F
6ED69A797F59AF9BD11300B3EE0320306E8AAC1B8B2781C8C031A281A68F92C9
082C8DC235E77DE3C2B8A9DDDAEA51A917C9026A6C658DA0C1CFA9306A3455DC
DEBCA34FB61C92CF7E920EFE0CBA541F76BE38DFCDAB5789904B3FF331C8B777
F9AE407411A1F2CC3DD53CDD6028774E3E17B7E7E652C452A41E67F5908C7B48
B2A55F609EF59E33D9FDDED137A3886899FF54F298793A3BF5B9A4A2C0285AB1
674D80F002498016FE85FF204218834A36A5113932AC42DE1114FACE360F88FC
253E2725AC027352D7ABF9B6674876A186F6413AABAC5CD0F3FBD002C02F69F8
137FB380E369552C6B0AD9F2EFE51A0D121F27EB0F6AACF939061FEF219DD252
9E523BEE2EA46FC06366DE55E491927323E7E83CF4DA693937B9DA4792A674A3
A913F422402E174C0FEF0F7C37F823D028F359CA635B41ADC4A1B978B311919D
5005883271A11FEAB8FC172F290DC550CD06735E671FD929D71650516E182B9D
A58593942D21514F001D1D67DA5B98824C0EAA9F83776C3E213058F0C9B3C682
0A3D0F0122B877C336046DAB5CCEA41FD52F5794823C697170F63305D9703587
4D2B9A6FF30C5017A1E607C39A1B9D991367CC335F80FBCBC080643FEDB95CCF
16C1E9FB858AC49DD27C707F37FE020D37BB04C5F6581A9416CCF8A7E49FD43F
C257E5B05003415359B5E7B120673C8F8AFFD2EC03AE3A45FB9E98BE2036D7F2
C270C65B6B066DD41B606DBAFDBB5F1A69B5074493DDF72B1BB8E684505AFD9B
96F638C0C410C39D4418D7D1224D84D3BF5981CEA0ED97FC7741669842B56B85
7144CAA99B7D9F423881708E2B9027A5C35BEF49B4A48A21805241EE679FA356
0F91A36EC4B1AB99B6D1CEBEB61FE9E19EF0265ACF014E227169EA18AC665E0C
7114E9023C9D2A1179D6584BED38C7CEFBB9975EF4F0CC740618BA5DCD7848EC
AC2289409651E3C6A3BFEFF57238D45D32997772ADFD681CF1D860AF9E662B96
D0B7D155A1CA2AA3116757ED9FBDBF2291C043D090861F3EFFE8B7D7E94BB873
1E9EE6023A83B463D821177645F7B70C2BE9D206B34DD6BD3D45CF42CBECA2FF
2F66C473D883DE0ECCCDE5EAE0D65CF0636932E1CEFB9859EA339F65CD8B454C
1C3C68469EE1F6561EA4A59AF42367A19DB210357A077498B34900702C37561E
DEB0B5CD0CB5C3FB390E5C0EF8B5DF3D5D7F1BC63D1F2B93211783E2CC47B596
7E3971E1CD665BFB388D2B8D2196D55E24C3B97D61F849C43080AFB296199D98
F21791CA3B84D427083E3956224F939762143858DA313686E5DBFA45CD426A0B
696437B42826FAC1404413B1017F96134E5B07F3168DEB8811194A58355758DD
D445EFE0D6C3AE54D2C42FD1E0AE1A579AA8DAD2E281E9C0735B99FE3C408867
8026968855B8826D65A68CFD84AA1299CE71218F3691822A366AF508FC6F7575
BC267278E5D5D6E7461EF7F43B97961869AFB227CE37E93A55F6039BB86DA6A9
8402F82D44F79631E20E280CC4BB4DF0190924CAA3B97C067C1C2A1547D029A2
D6630CB1DD39D16FB30ABEA5E3B8A531A42C5DC223EA00CA7368246EEAF97C10
5776A143271F5A928C2ABDBA8EAF9762AFF26D62EAEB5AFD00A134F3C35714A9
2FEDE600DCBC25225552B6EE775CF43A6E68C26E4AE2B0168F589401664736E7
8044EA187C8C2C969534EAA9FDBA2FFCD711A39A5C9B395AE3E4C3134DD889F6
0B7D4C45676CB985C72A38AC74F9915BF8752DDD4A222236EF02234F0A96E651
97E0421532FC81308EDDCB3CE1BDB741F65A5891742729B7BB7FD99751F0262E
D82A509292711EC729850A8DBEB176CDF0C497A3C872E2516317A5A15D7351C6
E0B88026D2A95180F35A8A7FE5DD580D3FA7F6CCD6D6EC817E8D0E776C5E807D
4F9542E8F5EB611BE098400D6D7DC137A9041C2E0D48459413DB36C4D38DF37D
4D71B2A194767DDEFF6E6A71C787265D51A57DDF28DAE05311F6229BAD50ACF9
B59FDE61660085E303BD6B3D98BF45EC062FC5C1BF0D1D35C3B553CEA280592A
DFB61CE4A538C579EA8DB861E43AE72034E44AB20B3F98753FF143B562CE8765
87F20FC06E25CC7C721642C3DDF5E6A11530530875430623DC1E9A13B55D6ECC
8DEAB5D084B1CD159D66FE8B0BADA48B5031E89EC09F0445F6247763B1F00F35
A95C0604E5915A1F161BF11ED6C28AD3D64D938EAC8A9FFB9A732409DE5A0B33
46706C1A41CDF13A8BFD71EE2CBE7245B1EF23E07190A67852087CC55F0ECD58
EC0369796F1576270F0A967EDC8C58EF506D7215E70B31D9D0EEDB6798F6B35A
1769F1409B4C2332F62E5FD214A2057AEBDA86C5D3AD735F65A2EA9E27822B2D
64470AC8807879EFC42CB6FAC14F6D60F29EE5B2238FC61B0BCF00DA32905B61
D1CEF661FCB43D7E93CC6A1A98EC3146E5CFDC4ADED73CE240FC5A8AB35EDFC9
DBF0437E524F8D452FC30F62E28E20A40A27BA2EB0190BC2386BC4B0B91385CD
C9BDE06C7CF4D7A6A33CF87ED7F360A47B4B566FEDA11B5E72334DC81043301D
F22965E54F91B6D5AA7E64C087DED0BE5B178BF404DBC2B9E96D8E013CD67904
BA2069209CA7A944F0CF0ED4EF2B6284F6E12141C3061624C4013E4544AF0D9E
4F267472136793B1851098AF6DBE0B09C813D49632406B3959877E08E407587B
46C2904BBE98EED34C749065BD04B3F90BDDD913634461BA9A1E0D4C93390818
828ADFB5DF8FD18D8F7FE50C0E3ECB65DA02BEFFB0832FBE415DB6B74D7C13F1
55097F0F01069757BC6BBA78EECF0EF65875A9FFE8B8AC47F713403F49B90B82
42CAF0CF12B03ED86482C3FF51D628BE1D6E0393BEEE72D3246B2C9962379D63
DF13DCBDF493101AA2F0C6D2094B82F4B164CF78CCB98D835DD6C5ABD7CD99C1
9A4B84AE93532182154737DD586D98FA2B1A614838F680A634E2AF9EFE36D550
284C7551109EE03CA90747F6891904612049180C059423E0569675BF1376565E
492D4929840F5ECBA63A084D12F8FBDA0F7D9D7055F424FBDF9F84F1D1147895
D7FDFD710B7A0B601AB189FD032977A6F25D5ADB8D3B256512F34DFB81C71FA7
8C29A7E0B61AE048FE9D6C8AC123B8BDEFBA0E9F4FC49D16C2417F4A5DCB58B8
DC8E8BD0546A4961E897B377F16B8DDEAE3627955F2842321642469D5E14789A
B9C7808A799ED64B53C54BBFB27070EA1BA7EC63E2752AD79FFD2C59042FA86F
CDF41D4505F19B707FFCE33CBA60C3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 72 /H put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693A774D95B3CCD3EBCE6E4D0B66D4A77C0D54F9300B1A5B26124F8B0D1F26E
0D181D08FDE3D629286E320BE4C2F2B0568943DE1A68599EAFE8F764D4A1BDFC
B3233B9397EBFE8DC4F4C411F79B1D23289EA3FAA825650D8A62496EAB5EDBBC
A637CCD068A86773A3FB74D01A7D06D59729E5AC2E58C07E573EF02AAB806B6E
A3E14F7D7C52096CC941F47D98620403DAFC454A30381E07F915846DBCB2C690
16198828BB42507B524B622F10AC8781B19CE8AA275D02388930141B4BBE3E2E
D75093D9DF32BD82288116FBB7EFC6E67AB3B2412051E7B3061BB6599DDE3A81
9C1154D1959FE6E01E639A11009281F078231838B6A6405E742F8864AAED4DA1
4AAA966ED2C03C95DED79E46D6E14D8E8B0ABF40C84FB2CB114ED1FB4E765897
BB83C0311F492902B6E86EFC14928420513294CE31D691804C05019B3A82871E
0DA58E249B944690722AB5D2DDD548C4DFAF41B77E0CCD6E06490470850F6F4E
F68CAC26C8BA9AC6A0B230DC291ED2211D3429393A07918B812A66CAF7F51F01
5CA1B1524B177C2E15E97ED790F562C9623E78D46FD50AC5CE8E9117E3E413FA
D4961F9D71373D9340302098793DBDF6F942A2805E9DDB38EA4DA41C1253BC9B
80CFEA599C638C1B63EFE19462485F52DAA9F7F1D3C1D4554AB87189D40E1B84
F71201C4AAD56F585783734361661357E752EC5E1FDB26350A79EFB2F153A410
F9E75E1C33B1C13471FB5FE1CD20235C4537CAE195AA21DE8E1A645EBD8C5659
CFDC25FD47099EC7152751CE05C2EDB222FA8F1FC8F69CA0F1C24DE19C6C0522
0EAE48E12FF4C49EE82E831D98F55644BAD9917BC5C9F8950A7BE16E014ABE8C
1D86CAF6A1F646CDB4B2EEA9F7B678665AF935FD7A4FEB02B0E8BC4B09F95C9A
D68F1C9F2EA611EFBD5EF188AD2E9A3502421B801F98FD4AF9675D50DFA15797
44EE1EF716C5026074556718173EDEB3D29559189F26A9F7FDD543A6202ADE40
D2B900C38B7465A4DCCB54B35622D5267307581B9B60457C6DA78BE9EDE4CEB4
BA1077070197CD075EF9CD41089638D7923D76912BC1BBDAF5C246C4ECBDA346
D5987BDAEB040200CF1E85730CC403E92ACA0B8BD2343B2FBAC6DC7731A366CD
8351AC28605894C1F473C516468EFB0D2A553530A692C33999F085BC60958B31
1FC89163FBF9CD2A16A85E6D74EFE7B21CD96AFCC4965E0879313223EFF7123D
C1F6674B508BEF5CCA6B7C445E6F8BCBB938F229A92D39E61F1FC6C3BD92C1B6
BAE4F45EA61A565BFE2D7D648BAEEE38E7B6AB295DB81CD479EAD14D2BE04103
5C4B9691AE29B9FC020B0C951B257EEB9847047B32A6BEFC4D46940E226D9569
724A3A50411DD49FDE9BC4106FB646EF8CB9CDB7DB1BA06B86A569958D78EE30
DDBFB40A9BCD7C982B2935450954985FDE504D0AF55F3FCF97B402DA6B7DB2E3
F3197F22989A094C23C8D3F129B489B7A162AA61D3441498DB1DA219D534C20B
55E130DAD812377E503187764B9044B53CC8155F8128FD56661F1790DC82FFF2
6D6D4D2333E4309CBC271304BB4FDC88725D6B560083966F66B49E540D79100A
B4AE1FC0E41C393E248554706F002485721DD1884CE66247877182542B85B086
C29163C9DC5D5FCCA905399918C89739925C5814F37385E7D947C501690BD047
3BBD24C8A6FCB0E362352AE67F64C836F95E73A590BD5F698B7A4CE106ABA441
19E51AEB14EDF7CF779A1189438FCF94BD5251083230CC3D7EC140818714F5B2
1290D82D32309956797375A26E0D8EF183942A38B7120E8E04E55DF19DA1FC8D
888C704678EB28EDF7485E66CEC74BD5993ADFB720AD1FEDDCF60B40EE3884FB
315C60BAFD890C2909188CAAFA7188E50259C6CFC176DE3ABF7E7670ED1D60BC
1A0878CB5854B9B7E743DF3EF730DC6C47A6A6079EFCED19210BC3EEA94925AC
02891F758DFFB0F602255193F465512597A44D0F802242FD1308338B07824C4A
6AA926E957B1E3DA0495500FB72EF229B1F8811DA503A98F135A7385D6F798FD
D31F0214DE92A7CDDBBDDD92C0D1F028102DB10C74EF8CE2785B99F4AE37FBBA
DB5DC44BC5BC5523D79229E9BA358832EB522F9F14B4058AC6F28422EB173AC1
B295F30D3AA7F35F23D6BECE39EDCC4EDB89C9916C52B5B1B2D709107FE9ABC9
6DB5E60B48A9DCBD8397144A0E6BDB44E23064D3457E732BE0324A1C22D24811
B1F9803E59D0E51A4C83E4582171E7774D69AC1FD7D2B3601251A75C3D3C9616
9B156FF1274852F6C5F1A94D780F6FE56C9A32192832AD1279676AAE3A302AF4
B7550F780967A2CE8BF08E5BC37AC9065827AF79598D266FBAA4CDC071F86C3B
4A24A7F06FA521CF6A0ED93570E84131A997B22215AF63552EC33B4742245935
5C1609C925438711424E40685B8F228C8AAF5575EB3A00D980476069D5C118AC
F1385B4C3289665244595029C5CCEBAF98FACCC2B288EF8BA81B61E485D0236D
02CDA035FE19EFA95865403C4B51C5AE912E5EB0584AFFF168ACDCCC8F252874
C62EE26F6D93A18452915285E1F70EA53B5E56890D9EAF5EA57C41B3D7C8EE81
9FE669F1B4EE18F12AA728613FD61CFF22058303E98B1EAC5F0017763DA5C854
9472609501F4B48B43B494A1C351D17A0145822B39DE8788066882C73BC55E9C
8C9C8A4D36FDC455A44CA824722A8BF58EA836E956BFC546EB10EF486F5D8C60
F8772B816AABCE36FAB4456CA923C7169CBE415E2CEB5D5304AA958880A3495F
2A07C04959828402DEB80147F848C9C243B410CCB6B40665DCDFE57BE6DE8FEF
53A827087540184E8F4989147D5FAE9E1885A73532EECDAA112F9F8859F06141
8F44236D744AD4D3AC5307069AF9CEFE19A1C771DB5FC90F94C2FB8E3555430D
FB2A21C292A6B890555BE6A705C385C4E4537D405999393277F359EBFC05DFC4
882CF9CC1CC1594F6E2CC768D1519F6FCC925901CC7DF772C9BB5A62960E793A
D7DCC1450D3CFED9F30725B8B4E19750664FC95985D0F455FFC41B976FE3C7A3
9E8ED781238D70F4818B42AF528489A4CDAC2C431A1BD96B49B4C72E8AB9F1E2
8E00D128982E5642D5357693FB50C3E82FC5B15C09B013F448543426794F78FB
97C7445AD6C7548ADB36DD926AB0CC484E895BA6AA3E5A5D6049DD4DD6C12A9A
8A5C47676BFC07BD7223F9D25A92BC87F8D16092920353449F77E4FBD1396BD2
5284A61BDE0C1DD3CF60208560E8F53E7F8AAE888A12F8B07E7FE53B99421957
6BE0BF11C410FC4C5D8027C62989052E523757B20FC8FE4E0D0292D9BAFAE6AE
A7B3D06183EFFB93E85A9E4395CB949EA2B9D1D405A7A5606EC5458BEDF7DBB5
57ACE342DFED7999017680F9493804430E440ECD4983F17FAFE7716A882684A6
E40154E4DBA15B9A5795F0E6860CC811D1DD6C4310B5FAF569B67A9DC6EE1C7C
54BE34EF9355A4F78884499AA96D291FF131263E989E2F33B2DA3F9CED78FA5E
F9020AF9C83AE5184D0D42655FD4C8B86A3F077BB49DC2AE7EC379D8FF928F5C
072064EF64613B64324AD8E15F21C025C02A6DFE7CAE1BE2158416F0BF488F5D
FA2AC33524DC4D8A8AA3F90D8F9F481B380B2478A873DA67536B8D16F737BEF0
AD287B6A53F8E6270A37BCF97065DADC79EFDAF8C57AD98494B2686EBBD26775
76CDA72EA0F6097B59B54718B3C0D54AB4B6D20E34E2F5A382788F1FDE5DBA8E
513461338FAAD0C794C5B480FD200AA1D5F4190EB0194EA2C84B399E78B9E434
FB5D10769FF9EF9F8C13117B30F9C73E7CE1DCB857039700867C654C667483FC
6142DBF291DAA3932119DDC200063B63A45B7DBA24BF838925010E8683C2A402
E1487F3E6B73F153EA9AC5B509CCC0806CEB0AD0914729624BC08DF083368AF8
6E3FA8BDD4546716863C090F2F17FEF423C57D7C3C852B958B473FA478A7EF31
4FA91ED0B36D57BA4E93898C9428BE5F7970618070730A54DFFE770165D17521
10008A5C0C03120E29D15C470DBFA53044B12D451BF6C2CD76223FF2C02CF7F2
1917E97C61F93A8243C4E1CF21AA04925694652E297C9D8135CC7BF271F41745
E04C6F7D333527F8F9CEFF2372A4224B726E04F445E46C4000A734B365073481
738FBDF8FC2DF0FE0355CAC759E0AE99A01FEE70DE8871E4161FA5CB68805A23
0721E51750AEDB02D647B37CFD7E2BE6FBEA99A7189465ADA19E8B5B6663E430
0274CB25F030D208CA697808D2D185F3F1D54DEF6686B09C9AADC43948283110
42E8BF9D3149598C76AB68EFC227E9DCB7A559B02C8C83393EC39FC2D9EAA4F1
ED1D4D0FFD99F23F53001D92DFF35ED60B8D6387CB6EB800EECE113CEE73BE94
CE6335ACDF84A135C7E821C056996431F260D6E04015F841174E6F34ACA3F02C
BFF95FDBDE38544317254282F746EFA1C7AFF3283D4CA843443F5AF36C7A4FE9
DDCF88D17D66E8F1B59BE91A212A5F61F9C95A970361BA3F89436B4AED67AB15
EF442F69408D2644BDB69EB5CDFF0E72665BF250A3F60D3412ADB57FE1E6B24A
E4A848240AB1CF3EC1681B212F9D576763E289D7CD9D6CCF9F1F714A3C87E51F
582C1ECF04D3777ACE4651962E5AA2C99D424B8A106F927B70E8358278279CA1
AD4EF538F87EAB6EFBA608D33B2C4A556677D515B7CFF097DD01CE09D5A77F00
F52B6C061840B7555F14FECAE611EA8CCD27564C0D3DAA2A4E7C7A9B3A815757
443E4E80478EFB697183201E15A0769339F342FF5DAE7327FF07734536059F3C
B14723DE5784ED8CBB888F0C2005C6662BE790B7DDEC536B3F57FD58621883BD
1667157867C51C201A23392945899228CD3F99E1156A949343F8384A0AB4692E
75513AD2E1083D0B9C4A10609E6CC242AF9B80A9DF626FE58C22AAFC9924768C
0B7E7FA6FD3ED23B427F69C83BBA2FBE805012DEE8FF48E1ED509045AB07574F
B7EB726FD82009852E7F941582F65308B0C0420F0ABBBDA9AD0B357793DD611F
3CE69BCA62666E8A927B3CE65467FDB37D1EFF6865A02802A5653010FB01A9EA
8CEFFBFDCB66CE1DE29F0467EA182C6625775E4A13DBD4DEDCE45220D575D6E6
7709BB85D3C1E5FC9D3CF38996E593D40ABFB92239BB4708E3493BE4FE4896D9
7FED35788BE092FAE449C615FF37089F98EFCB4CE25FDD359C0EE6410903DDAE
C2036BF61EDCDF856266C2406143884F89E14B47A1A960D4EE60D07EF3E95C54
E8C8EDF3F4B4BD648F838F3E34BD7A38270F02ED5183B06961DDEB965681CA13
AC9B2567CAE72563F58C4594B51606E8CE2858DECC194AAB7A3C2A0F819C1AEC
0C6C000D4BB734E88CC6B60175042E44355EC41C18DA63715D3283124C51B381
7E22C0E04E7E022BC302B63A470B24F951A0012E5F48ED8619056055FE4DA5C2
532E885142291501D2E1E0890E1A6E7611E76F0C95ABDAE57DFE956D470B21CC
CBB406F56ACB740C2FE99D1DEBC200E87906671EAA1A5545E91752E96F0DEDF1
36BFD60C6A9A9D6DDC9911B27A62051E8E655E697BEBCF5068C82D78A970739C
039E2ED100D9F7A8171A00BF8D143674CB53E1D0E141AA01528C75262EF6C51C
89A806DF1B4816806ED524ACFB86A2F3F9F8E62BE70EFDF4CD5A3A60A77C5DA4
3790FD252E1416E5701C2D7F9AE20BB66784F0E5D7C9165D07250FCCBB62E2FF
3C0EAE8F8BF851020018739B45F3D689BFA815773EDEA2635703D4FF4F6356EB
46795FAABA71C72C2A99B34AC348F248A61EE4E76C0EA233B2D0C1D873BA2ED3
3B9222092474DA25666817F1C87366731370E3C4FD52B631ED9D32DDA23827DE
5F4E39F9A637F4E740395FB772046A0801FCFA7C1BDE6A1BCD28E9008976B276
FF10056A8BEEE8C2B75BC09019BB43D410122CF27CFC8FD9DB5A87CE67C28B3D
417E7759FA763CF9011DB0DB3AFD1794498485F4069652B7CE9F3DB95F5EC9AA
78BFBF022A94FC4C76B8DF247577D4D03775388D3843665447E53ED282783FBB
F9EEC9AB62BA5F9D7EB7A6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/UniqueID 5000791 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1D9B057F51ACE6BBADF67DC4C0A0F1AE1F8606EE140FB1B2D8843522362
8762E804EDDD847E3201FE5EE8F0F34C37204F4DE795965835323E85D72C6A00
6B418B96DF758C100BEE554C2C53BF9861DCBD735247E87F40C2D96DCB3F97DC
78AB912C76BB1ABD750EAB84C7E590434595E235D4EF39D5872B805C1CEA7EB3
368369B2A98529FB880AEF644E86FBE499DDA7E80AA55CFEA7C6A502ED7E13FB
7D049A71620785E5AD72BC0AE82A34E8B0235367EE050E970A3427942DBF20ED
6CA129B742049747F6A1129B659D6D185D7564168997033FEB96B9F11BA70EFE
91344967B451D0993BACFA317E43570B74B1193F270CE537242023DA14E0869B
DA1A295320574295ACF03E3E3C78D9D6518A4AD6BE618098465A83AC02B3BC30
6B8713E7F719A11991C9E1BF0CEEB87F341617EDF0EC79A0BB8B3037D15F349F
AD7A12A478AD24CAEA5B99DCC6C268BED3EF9533A847D6F72E2CF185C932D3BA
3C3AC4BCBCBF368DD80C4481B2C9DBA841D6A91AC3C5A05B6B0630F7A781596D
5BB0AE9B08658E12B5FF633460151828603B33FC29DDCBB7761C63212BEC7B7E
F617E6BF5F9433960D5804493CCC8472D5D4FF8BF4A18EF139B94111862A1776
D2B9446F3ACE38D8E67DCD7E8C3B4A0F5421678A1F314ECEF28D9B226674AAC3
7D60C4456EAF8ED946043C052F9BE1605ED2ABF485B4E9C20B727A23833B38E1
6E15F9FBAE784AA82CE9DC5771F38C34267037779F5B417137A8A2B4EEA4C32A
0C8F604193E4EFA21FE22A450C3EB165E9F5DECF4319C7AEB33F912F149FDEFE
63150A652A07E2AD6080FFA6DC62C23A735C8A062333
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/UniqueID 5087386 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 73 /I put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427084643B66BB9181094E29D
5FBE37708E1D8A6B7518A96876844CB66954227A7A6AF28DD075A462526DD5D6
40EECC56FA366106E55C7068997B54B7F0D03AC1AD45D28C67C7ECA99DBEDB1C
E18A79C353113E2E05B837E703278B202112B1C69E42A69D64B62F0E7D8F7E5B
C1F93F0F99EC20EF312046F4B0CD7DAB31E422070B629A7FA85650543E7B6F3B
ED9574B1B91D4536789D4DD1140B312DBFB70ECFC7C9922DADE357FB3693737F
A97C6D404BDE13118127347126EACD37721FF0DDCBF30D5E8A64007455C56F32
6E5FD5B6E4210A39F3FD6C54F0FFC09AC28ACBBB9FAA86EF8B5B4D696CD25F0D
66ED71DCE12E65B9B0599179401458A729DE14428BA747B04A3D3864C5F29A48
45CED76429C2002B76F308205142578B0D79FCD88121106C64F5EE2EC15CFD48
B0A6E98EF682A58BE267F167AE266E4C06912814B8D189135159E686224680E1
80E6ED9C86D4F57FE3AF97602D7C3734A614078C83E1776316EFDE78DD4CC1DB
B28FE23BAF9C11A3696477E0A4C777E5DB56CAE12CA7E029F8583F258EAE5119
4EA92F6698FA08526DEB858F64622EBF2F638A058E234468B01F5B47E08364D7
98B7E2423ADC775BD868B18277BFCCA57E7BF6BB01C9736601B9AFA1BD2FAF82
3EF58A9F233F122DC2DEF98CA783E052CA1A1FB37130F262AB13CF95D6B7DD58
6D1C3BE819DEFF6700DE983AF866C6EBE00BA9CBE07B116946D3D6BDD98295C5
7D31BA9620B4F68AB0C6240BB8EE62F689064C2269935DF3789A8375E4C8A526
AA120A2E782DBC51B46713D220CDC19126F0798A0D2338478DA12CDD7C757537
C3CFDB8FC934FC517A38CEAFEECDA567B2130FCC3848D0A496FB188276AB1CDB
C72E2E9D965499F1CE613818802E689802BD96CDB70D8FAD80BE2F3E639DD0D3
BE20
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT12
%!PS-AdobeFont-1.0: CMTT12 003.002
%%Title: CMTT12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT12 known{/CMTT12 findfont dup/UniqueID known{dup
/UniqueID get 5000833 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT12 def
/FontBBox {-1 -234 524 695 }readonly def
/UniqueID 5000833 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT12.) readonly def
/FullName (CMTT12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57D05DA0555DF933BB0
7B42D264831116C06C79335D519461E7B0E870A6715E3D74A08D1BCF86E3BCC3
A43FC6BAD1C68BD9D4AFCC06D845FD1F1E70D7A47F0BBCAECE8396E04591E5E3
4797F646AFEEB7DB548183F0B74C9BB6BA2AA04E7F5950EC8AE97C741D4B2C5C
A8E7A8DF5A36A30B5A7592D95E1DBC63EF33C92FE459792CED29E2B8B6919251
75EF62089BD7D44A6E1F9B62EC802FBE62B821DA1C3B2DDED45D27964AD29ED0
9FB7868F3A8FEADA87A8E42D52C1EB7229D7C79B60BDA263F2BDB025AE14A507
098FA274206BACFB4A0A7257D5998EE8F0FDCA79CB61DD1FC59DADD11E16BF02
ECDFD706CDA1E72054D4EB55AF7BA9F19955886BC0BD6E0E3FE3769C94AF3581
DFB2BCD67FE2892AF07E858A01280194D8DD7332B3D0A585C87FAB056C2EAA9B
5AD48D1C9F00CEF8EF0D1408DBE1C03D04B231D7B8D5D998FE0CD7EE19828EF2
F988EBF6DDBFEE00F04A4A1F4E1A55DED7EF3AACEAB5005F1962C724A017C914
2936E2E0DF26A55ACD7DD836C6035CBF07981C1BCE3615064F0540A1034C69B4
E3908E76EF8925D486DF0B4A8E1F02D8AA99585A7C31847AB9382F83880C1C21
C496AB2DF8E7BD4643B28B704B5F6B53429D3EE940A79135F5BF0396E5B46F23
42AF406C26D12BEA7A41F332AEB75DF43C15334CF4651A99F602036946B1B91D
4BB0D2E51C20216D892C8173241AC8FD15A37C3CDD8AB4FB67D8565AFA61C068
95E3D6E46D7C09BBD09428207D506AD43C693F3C3D787F6A5C39084AE45E81C9
830900DB50DAD10A17E118FB5E9680B5194716A788FF7514A1167DD1A305FBE6
67497236B571BEAE378AA9B2AF7868B878036C6EC2CD97D084964B30C2248D56
C9FD5C7C9D966924F124641FC99A84DDE5D5FF995D6B82ACD9F53AAFF2692126
B4FADF4FA64AE02BFB5505446BD39B61882791FBD3D0C08B8C765118B92C2A5B
63978E50C74C43E30C3627ABE7BBB3A7B4C1A498B33CA161CE90FA34E9C85636
E79B482AD33DA5F0E0E54A39325730A438A6EBB464931847D4AE034EAC20E15E
45079F16873B5839C3823687DAD29CEA4A4A57E1FDA4437978818B4C8EB83E1D
C4203744C86A1FE55F5369B12A05851331961635D267D135532232FE5F02F3EE
B5DA8E4B3F9DAB89307AB0297B75E73D446B758A2463FFE6E6CA231CBA3D576E
4C2DC157A851E0F433AEFAE3877F017F011D6D78BC791A0272070806FA551AEC
E632BC1F89C78F614B3EF4363C2B921A449F077FE322372C7137F27A36FB88F9
D12A35EE24A912A8D5620EEB7194942ECE722797BDD710B1FF1135AEFAD8BBD5
D9B2BF182FF1BD4587D588AFFBA8E64C8BE9793037B88216CBDBFD2A29C89B8F
3A2EA818B8FC400D0DAE7EBEFE4E8502AF3D52D04FD6ADCCEDC7998FF67C6589
D5F11D33CF4A1A09F21940569C3AA8FB5CC91AEF972F5E007389F6A659FD56E4
E7A6DF5D7CB5C56252A9CA1994524D5658C9CDAC164A8031EF8A81D75067B08D
A54825FDA3DDF6BED6CD4549D057EBB0B3142251C52C08E432A4CA1AA3F7CD52
737574B05344C18DAC4445C47D39837D94DAA97AAAE956C340D415372E19F1FE
BBFB175170C55A86EBA2CFE2B982CCA4178EB314E04A471E69A74124F7EF914C
9D2C5B91062A1993B137EB2CF690B7AD3118EF6D669CA1822183CA4EA8BD3935
EF7D78B4E4FF84792F24E3153D74B89FE4504A0BAB87A9BBB5F046011B44BCB1
7E7BDE9F3101FF6B841B35F7F3F40D85D4D09457973629E826111DCD8C162E7A
48480D0F5EE08A5827BBD4CAB545DEA5A02EDEC6232BE82819BFAE6E9EC29BCD
B5EF2915D0405323969DCDAAF26C025772EB732588DF290B51049BDE12FBFC6C
ED57B3676A86D789F2D0065910A24884130877F9501E25FBD4152530E4D477BF
EBE8A3EC054045EDF429DA3A7E1E16A95ECD624D46AE36CEB60E17E43C812674
55E1785896DC554D142EAB7BAB6719A4B733A072AF2DF8A07001C041D24ED019
04D17A2DF06829D886B46F3848D36CEA4AE1027BD2AD73B95C80E164839EAEF9
268CB6DAA4ED67D5E8FA0B89C27D201F7AFDC66036E7DADE4457A4DFE5C18F9C
F20E2174D45F8B14CD274FBDF46DF35E3EB0CC946AA3AD9C0CF9FCE2A83B1172
7BC3602FA229D49DDAE25666320DFBE6D49703D0BA8B40CB6DAF5EB8738F6425
7DFB902847FDE355DB3C3938F09A0C22C705928D8117397632832887C17BAF0B
1DEA8EBAD857572F14516313DD2DAF55C6276D6D8ACC73996CE66607C448A940
EC78526EFA60105E7B204A095C5ABF6D6FAF1F5F43BB99DD39C36262E032E9AE
DA4BD9F1A9EE3D47347FECE47FA4E8E0531A99EE2FDB67946B0CA4D25F39305F
F63C3DE13E7E796E47015907AC0AD45560080EDA4C1DF65292D33D0830512E3D
47A9FB39C9DF854A3A57FC71F9CFEC891FFD3D598B6E35BC17503330E2AD8C4B
A094CB8E31330A3C18A4676825E49CD2CEB3E4B8A7BA34169133FD0C00E4C846
947188A76A8BE5BF87F56228ECACEA52DCB0DEC0712B0970A382C726050ED65E
025E1F8E2F291932F24BA1A31A96F3B0F2003E3ED4D13FE7A86BBB5180D68129
A43B8E46C76FE676AA39F9ED4BCE8D1DE04F70287A30C3E0ED4A5BAB42309CEE
467CE934E22994D89872F853A7B227E0967BDCBA991C5670620DB72D8413DC7A
D7C18B057A6A2F3FD15F9E89491AFA2FF2ED77D8211F7A1C3DAC9EAB0B217819
65BE94660E1EFDB16F4FACA5DCC11BC483AC020851B09CAB9E6B75E86EDE179C
359A5FD0CB30F6DCFF48EBC3F4CB822BE885D165EED166CCA91A1736D459501B
AA1449847682D2A821AFB8CCADC041A19699BC3258A1858FC72358D5FA919AAB
1B3E788F096DDE4DA91ED8169C1EC0CE9937B7ECA7B1CC9A3EC53619C8677101
6157AB936C2C752C1F1090504A03808C10365FCD69FBCFE0CB3D0C1104B200A8
39468E1948CCF09A0F5562ED4C30CCD31787C93C1474C8A88BEC654C7611BD14
0AF83BA9B023152D28B7798C7CAC71E212D7D96BE09DB96B1307EAB66A5AC1A4
A772ACBCCBF863C37703D192A851C76AB5B919403504B3186C0DD683741260B4
9A9C1002E4C344C6F40CDE3560C3EA54A0C0E8BDFAB95140224DF9A7FFA76841
41E32284C58E3BD83AC23EFE694F1306ABDED67CCC80806D75C207D3326C252A
E1864586957EC33581692831141E5B70FC1009724403C6CC4D405355EB01CECA
B909C450E051070B0ED88D5A636E91FBA861CF0471E69C43C79CB001B2FDEEB9
5AAA8B2C2CD4FA1A66B15C4B641349AD3072BE2178448BDD417F92F4E7262C35
5ACC866C3099D9AF62A6F472B73CCF80B0D6348FD5255231B95DD38DD82D3017
19E714FEDA091FE0BF101B1DFBE482FEDA520F0289A49C3DF613CCDB7E5AEF10
856EC36C12920941B08605F856F804FAFEB50101BF47699C5D80AF4B118BB3BF
ED9C475A8DE4B2C7B914CFFC6DC1A67DE5E0C59C20002F6646865BC17D8D4217
D0DBBCEF05F2E36707204936FDAE4FC31181D591F2FEF050EF2608BC453B62EE
2823B5831DBCF89D59813B518B4B9A9C88FF02BC7203CA663EB86719E18690B2
BDC7774E53E4D118AD8A7C0645A5491DE42DB2486CE206D6B21F4D9EB613F31E
DA059469A78485C548C687694DA005D02AE387763AC68CFAACA79C8C1481AD38
299F11ACBB9DC6848C6EED480E7FD61D6EAE33C4043F0408B89BA75466127AC5
2AD9120A809E19254C5992D8AF382BFE46F85BB9968DB9A6605005DBF139E6A1
602E16F25E6F1E346755AC22E7151BB0D1AC3227371A2B268297AC88209BD29E
1A6A377B51E9D15F622AA7EA47662ABCD6F7748028AF2ED5500AA0F41970257B
56BE514B875F486F43F30FA7DD267B90E726D4E4B9F225EEF68B21A35AEDF65C
4F6967AAA199E1677F54A7B0F12AFF2D98B4277B03344633A4434529F3A06603
A53698D7551259C6596AE81E6150A0DDCCF39C98BE9452D264F7C01C7DCEE317
2CC75602C07BB48E590CBDF44ABE525AC234A00EBAABE1B8D23CC6EA548E207F
6BCE85FAF8807393DC8F6AD252B08CC73C7BF9D414A9CD956264790FB3473068
B94ED718F40AE11EBE0B7EA504BB31BB45A2CDCF23F1E5732263AFB54CDFC03F
9B1943510690A8BD0263341A48F36D3077AE4599DF657EB2B6999A0E4E7D84A4
993C7C3D827DEAE1B238E255E4EA026490C1577CB77BF0E56CEBB630CF611EAE
1563E3ED4CB17317960760784CED837394A6BB89DA98D59625CE5B87CA6EC69B
C0730D18BF50966F9CED51B2E575F32AD81E28D5466EEC47E9E0DEC0C43B1C99
082E4D93D8548EB6C2CBB375BB50D6BD867301C69A4ACF18225B55CB3932F290
DC3B68B2BB4115FA8B4DFD2C2836A77E384ABC328306D78C8A0FDDDA7E093873
72CA4ACCC743D934148891F614AFF6BF0793B897471E595EFAE7BFE2FBE6086D
F561DFE8AD6B2FFF6452DA579733AB8A60A76DFA57A00F09A3F26FC1872260C5
D45771CA82D8A6AA77F8A4AB8568A8E611D504462E16C719F412175F5EED1BF4
E368AFFFF8742818C8C904B0C3B20ADFB82680FD6FAD87A4CC4135907C48BB13
E5227F1B3321A27464A9D1A513CC0893A178298FB091C13D79039FCCA0985229
F334AB9AF93E67BA96F509996FFB4415B8B844CBDABA036BA022CE25334B93B8
3C39AA5163A2AA1AF649652FA6B62BF63696B6F9EDBCC2C348BCFE5AB771064C
358EAB934793794F71B626757A2E8BC5CE6012D1B54DCB2F5BBA7F9EDCCF0A98
3B023DAF580F33D2356F12DE37715122A96733C9F6FD97E078EE4212A30BA409
8EF88EEC07C11FC80A457834A7DEB29505BC6C97C0737735F01A5D987C755047
A98A6594CCB976C7C7BE18D3A654A76BB842BBE602942616A56813AC1471699F
FA659E4B2D4C4C9A521BD062177F099E1C4DC6EB9FABFD4B901EFC27BE272262
C35741DB63A35C248FBBE851A55FAF2BA7931B840F589F1EC765FB39B8F0596B
DE9C3D0D92743851925D1AED3F76C438BD4EAAAC949F72598B5C2BAEC406D92F
30C040FF74DFAE34599EB20040A5BF981AE312A6CBF50A46B3ACB92A6F7C52BE
05F7B0CED577C87E7CA21D2F4A9EBE24E18A070DEB32D3C4BEE1CD2EC0DBB3A2
1E71329E7790A69914F593A907A742D3DD780E717C0C7899CBB45A988903DF1D
2C7DB59729024D592E01B9AA8679300F6237724096DA35C2FD5DE79A3185B60A
024FB3A9694C1E5B171AFEDC82882DB7234D51707F0D04270B003B55C04BDEE7
5BDBBCC615B3019C5EDC591FE2629437D9690CF4750B42A96FA6FB69AFD3DA50
9B1CD05D47E08D27F43F9AB20B8A48A155EB708F9EB019D97D29F461A1C21EE6
8C0CCD60A0034832DE82DFCA9678731D315AB326DA1C9A32C9A3D9A83437DAB8
C634A6E7EB06DF5006BAA9C65DC69923F99048384F8A246DE32603AF5D4AF804
C06408E645CB3FC26DAD0AE77F48AD53F63C80D68E561FFC8AE37D61CE0CDB30
63857C43196D9F41998A98CF1F6119AFA3789E28E1B6195C8E229A105269D0BC
35F8C1635400837F5777A8B9FCE870226EA552F70BF4B79ABB26CEC27AC01D29
90A5BC347B5C3E5BF52CCBADC26506332C5B3D8978A89C67CDEA85883CF5BF5B
AD46C601B7A131A118A9B85F4590BBA6E1CFF52FBF7E35B760DDDFD9EE8B1BD7
1A97664A053FE5647C7E9EBCF150B9E9E19518EFC0F5B48D58C23E4594AE4D35
E952F8ACEF3DF409634376F79EC7AD7109DD06C7D787CB7BF545203155648D26
25A3E11EF9BA85A56F73595977EE0F4F7C4944B212C6CB7DEFC23235A202BF06
602E1413AADBA33994F3FD341D98DAFDE13FE907B9B958B683071050A5CB1BBE
3CCD0FEC7A27E9663C3A1825826654E53CE646A7853946B14AEEA018A82110C0
F112CF4F6A37F819DBF23F1364EDD3FDE6C914735C9680EF375CC7D26EA32AC0
E938F608AF10E322CC4CAE0A57C495DBD04392ABD0D11691881E9C99AF663D51
A50708C3A4654DB7F45E3B14289D17514054F4111C84CAAE6731F29725A4E935
B2545A504687EC52E34E44853A01022FE531D7F8BDB493C08BE99FC60961BC96
3ED1282671C94AC69CC7952F7B6D45923347CB9772774519CA6F3E389D882D7A
8241B7F5535B22B06F0E4DF27F5A2D0BABC5E804A0AF8AAECA6A9335B3EFC525
4B994EB7772A0B4EEDFE3273ADCB4B3CE56EBE368B117F4855C8DE8098C3B4E5
E5A03A18B460E7ED633CFDDCBD0041B98D0EECDD7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Velthuis-dvng10
%!PS-AdobeFont-1.0: Velthuis-dvng10 2.05
%%CreationDate: 4 Dec 2005
%%Creator: Karel Piska <piska@fzu.cz>
%Copyright METAFONT sources CTAN/language/devanagari/velthuis, version 2.13, created by Frans J. Velthuis et al: Copyright (C) 1991-2005 University of Groningen; converted to Type 1 by Karel Piska with own tools, METAPOST, FontForge and t1utils
%%EndComments
FontDirectory/Velthuis-dvng10 known{/Velthuis-dvng10 findfont dup/UniqueID known{dup
/UniqueID get 4889001 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /Velthuis-dvng10 def
/FontBBox {-373 -403 1246 940 }readonly def
/UniqueID 4889001 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (2.05) readonly def
/Notice (METAFONT sources CTAN/language/devanagari/velthuis, version 2.13, created by Frans J. Velthuis et al: Copyright \050C\051 1991-2005 University of Groningen; converted to Type 1 by Karel Piska with own tools, METAPOST, FontForge and t1utils) readonly def
/FullName (VelthuisDevanagari-dvng10-Regular) readonly def
/FamilyName (VelthuisDevanagari) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /ematra put
dup 23 /halfnna put
dup 47 /tr put
dup 62 /halfja put
dup 65 /aamatra put
dup 69 /imatra put
dup 70 /iimatra put
dup 73 /ii put
dup 75 /kha put
dup 77 /halfma put
dup 79 /aumatra put
dup 86 /tta put
dup 88 /dda put
dup 92 /anusvara put
dup 97 /a put
dup 98 /ba put
dup 99 /ca put
dup 100 /da put
dup 101 /e put
dup 104 /ha put
dup 106 /ja put
dup 107 /ka put
dup 108 /la put
dup 109 /ma put
dup 111 /omatra put
dup 112 /pa put
dup 114 /ra put
dup 115 /sa put
dup 116 /ta. put
dup 121 /ya put
dup 253 /subr2 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354BEAA2B844F1BA33B16F989CA526
AC3C982C14D079C7C420A1FACBD0A2539A549F8653FBB3DF939AA6053621B788
A8828C7587A523D0440751ADA998ED6D4D09A521E8B4FAD2A4871DB983BD4B4E
C4593480C11BD18660E382CB124EFDDBF5E677AE11363447EEA53C03524C2555
2BC4CCCD1C25DD0582CF3FBE697F64C35F19058FEE3E589CD8B090B8AB60BCE5
8DA3A4005E63BA9F02C2F8A1AD17BFA463C88F71F745C538F5269C7758BA4DDA
967052CE299C315EBF40B3F7D701926380171FC233B5113885421B2CF1741857
BE71A28E29D948741F914B94723F5C48CBAFC7B78555B0DC0BD384537FC6767C
386D70B99B447936CFCC3CF7926D74A943D2AD6FD1D0AF508512BC537544EDFC
A238621BA16BC33D0336AF3E4D67B243099B87F7F854E0128FF80B69ADE40939
1E94686EA84E031301B522D3276479D5A732334EA5B90196B886AEA7C4E304C1
83813E036C58689AD8227824A0493C998764C56E374D04634DD7E5EBDB974ABA
DA6A5AE7FA0F1B48172825E4F058E3C1DBC4C5669271FDA1290F2593FFBF67C5
B7AA8D3E088985EFED8E1E663838237EEFA61198487E5A0817D461B8CB0C5DEA
98268A4EC5BE771D390C7FEB985B2979ACFC0EF50A956AF7DD8F89E7D3187919
5788F175BE84D5080A6FBD21E5C2BA833A3F7C4B61D213F2C6A7EADE1CEFA073
79C70D4288F0345C6AE6F3EB51F6667DE9D2F9A60A9ADB4C4D0400DFA4499094
85120031D24BF85C45A87BC186A43B5C767E8C13E5A85563A11A1C5B6FF39876
BFDCD2A35AFF6DE63FFF3BFAD518A2F041B9D575C9E47270675DBF3F91BF6ABB
5469FB9C7745EE9FA75E293F04F038CFAC465E3F5AE8D8C2001BF0377B43E5DC
9DF9055EB8860A6674522C415E4581DC2E404C1C5076FC3CE63C7F1CA8D7E459
8397ED2A1245356AA1188E20E1E71BCC60DCB5AF7EEEC2F7DA99F12110E07D66
3DFBDC0645DBFC62939B8A1306AA74484117CE5D847E287F6268361370D56027
6298242DDCFB5B93FEED8AFAE28D5B79E668142F32A60818E661E1454510BD9D
6B5382804D1C0062CDA6EF5CD1062CB8415E4E385507F72A9A0C81E94A8380D8
9096E480D7B112A801A369534834A226B66760F4607752DF8677C0397AF9D0BA
FA2CA8FB5AE053A92B95B480BCF32568643D68501E25F217738CB07AA7789961
1C952405E89F5B790895B71AD1156AC74542B942B0A4F70B64F7A89EB8D38650
074DE7F40568FC538A0EA2E76E1F62790DA67887AC5305CED3C6662F5AEC5B3E
FAA888582591731C8053D8CCEED22733C4FA131A51FD0D4D032ACCE3241BB2FF
6DF5E525250725A95D15EFD0B5EC317437135C58C3C43A4C530DB3EA06EF9672
983138D713933F67669B77800E047CA409DA46AAACBD1D1541E27EEB978C7E90
7EA4205A0BC3435596988D1C67406AD33743D295A349ED6A68052CCC845170D1
DD32FFAC02A91ADDED29AAF2916AC16E116A1D79D91316191105652871FCE2B0
B9FB06E184655B54E82FA19C6ECB9CF4F23BF1D165B73683B97280E3F8CE4547
F56244DC68380284A1C44A2A00554667CFAFF8A417D246F28CEE9053CBB2F20D
C6A480CD99FA259F81813F0B8FCD2ECD47AD4CBC728EB209FB5A0BF3C85656D6
45C92FFDC31402DA68EF579CD4EBFBCF2F88DA535DC05FF15EE71DF85E8A62A9
926FB0E1DCFECBACAC50B4CE8CD9DA19FFB01ACA426DB4BC12DEAB10227260EE
C9FEFF583E0C1745D631D13A802CB7B6D960A86183FAAAA649904C034BC11408
09BEDC6CA9CB85354476F3534D7B96A048FA62F116941558BD0F6554E152EFD2
68E21171A53AD5D9D20562309C8864FC6ED851CB0F552D820E8E7978DCBB52B7
9035787CA831E3194252621690510FA86600520052410E9F98DFCAFB53B42822
FAC82C374CA8415EC91BECD4FC063733F2DDD74087FFDEBB4349701A0525BB3F
5F3F1653A6E0F0237735ADBC7FF15A2B082F28A2944B982FC858089BAEAAF0D1
664B7989839C3FFD694AC3582DF052B93976F055B7F10887DB9B912FEEB7B5D5
EE7A3BA6E3B8BC7A60046A07D6F91776485A206593B483596274ECE6D29E3B78
09CC47C1675DC6FB99EC15241977DCD2B7DC83E6624116FE4F2B4050AB3A26AD
6FF95ECF91A3B5C375F70E2D5074E2F023CF265472A8A6F3D69CFC03F5FF651B
72A036303F52F09DEE2DBAC1E7910F8633A6E6E7219BBD7D79F8DAA99A07F16C
FCD9CF65AECADFFA64A0315EF59D1B19CE8F60AFCD4F6233686E736331A0A2F3
2D86BFD2DEC408F52E85FBB6B7DBBB6EFDF8C77FD2561B8552A535FCD8CEA371
D8C487721B4A8D3E5A40C533386B72D798201ECD7CDAC68F1646C46E4C3B385E
EB90D5258CD26E5B9EF345BF235FB8A568B05AD6DD68CCFB01FD63C27BF334FC
C219DFFAD9A7F7CE58C4EC7C8E318DBC782D6AA25510F8327D4ED1D8588BDB6D
9A0F497532955A9C1A823E6542E576B71706A245F021970BD0CA95A4466C9476
AF5EFD077C806EB5B340949418A3778579974DCD3F127FBB1886DAD53DAB617C
A8B941DA01D95434E7E554BBFC0FD8140EEB0A1C7390420B7A0FE23E8F680F30
F85ACF56BAFF304AB7BFAB829D97D28B8B83D6B8B57305B2A0EA620F2429DD28
510BD6933C5D0091DCB425588C214BEA2DF6D2E7FCB5BEBD8431E5F113F16F9D
45BB4C4D14CBFAF0A26F6A58E84AC5F547CFF9AB57586F159C1DD5809BC3820D
41EF483C3930F9A10264F98CB091B751A5E52C22F18DBBCC58FB575934A1BF2F
CE3115A68DD77D7D41BC38D9DED2DE8CF130CFF337FDC665D679AB7F23E9F07C
60E7A16416B00BC0072A6DC90F46C887E81F10F1BFD31A30012300F4D52C8544
6EFE991758A29EF0A98E141F2574BDE6E770612FBD235D3C0E8E5C50B281C463
C67604D7CC91307EAB4287CFA2035A0E076AA3D43EDE4A16764A58375A58F818
A5442ADFFC2E311E693EF9C70B347A37A4C6AE05D354F3DF763E8DDCE53D52D7
085E505B2EAF1FC880B3CF8535ACFBB53503950CD3C10C33E409CFAEABA243F7
B677215757B34DCF6017C14469B1C3ECD7DDB6227D7374A9979E95B8FF06DBCD
874DCB470587A46595C827C8D978013113DC53E32C1B841CB99206D728F7FA2F
26E195BE655D80CBE7CA75F181E01D035EA89A5F1B7672017544D671A2D066F0
E17B2D487D4709D6DC66D950374D2EDBA8722F5BE50362017A1390FB5CCD8197
CBA51E3AB14276D900EE843BD07D4A1FF68033CA438868F9515E7B416CF8A775
B6F94460C6D7206F3C66100EBC1072A622B160E676B2BD6ED7C47A640706A8DE
186F7D4B8CE80053298DCBB208EE20847C01A51107EE63DF7832F483B020CD87
9C9FA40357631E8FCBF5BC6EC3DE6B0B1911DE00FB60D77D988FC1986485B89C
89B2816FC15901CF93AA9AD6E3EE65C4534D5B7D2BB5691B5C5317AFA13744AF
778FC8E179CD937BF27EDA59277E9F31650A1CEF13AC28CD20AC875A48B78CAC
15E401693F2207B9F81A28FAA1D7B2146382FC562CE1C2AC163AEA7C4AFBF66C
73C0FC1D1ED3A9C7FA898A5EE4E53E48B3046E97F07033488B1949EE50DE00D5
1DA17E68B35BEB6ACD4EC65A705F20AFAFF740D152A7B6C9A4EBCA5C6F297F78
165C77BF075401E6CFA7BA6A43643288B6100D5F97ADFA3CF2A498A0DBEBBC4A
75CE79DC189E372106793458EFEFCA84539F270E0FC35F9BBDF8E70E86541F3A
1DED0772DD6CE5D9039215C6802F4E9C05F0B077ECC627F012E4D3E88D7E97C2
FBCD2DF1B804AED3B6FF8C2872DA6255336DCE85241B4B3B6AD6AE760CC68AE2
3633ECFEF20C692EF61EF867AB2958412853130078F23B2274493685AE36F2E5
FE6317C949AB0439E92CD28702CF49460CFD33D9955687617BEB8CF3924431F7
1203ECF0452BFCDDC61BEF49FE1A6BD236886F134C721F30A7914EE37160428B
D5F3F48A9ADC09A2B8A2383FF27F9A27814FFA4FD33EACD93EE06B57153A591D
E7C165ABD84D36CCF5F0A4E858FFAB8CBAD20DD6C242B67A8C41C1DFFF0F8CEE
88294A2BAB5D9A15CDD1DD44F4EA6F724C0661ADBCE981D4BC9F468BBCA84F92
0B6649EC8AA56DA0F7B066681A07A6E94094044EA453D7FEDB9F651A6099DABC
696B83634F07E9C919AC9B2CB099F1D84AEF04E5B0DF1D328569DB220A25AA8F
04050390B0F15E2E28DCAAA490E1D145405FB34B93D0DC35319F31B16072E255
262295212D30EC05B09BFC89BB0F51EE80BC721DEB1B3AE446BA36256D46D934
85DB875A3A8C0A433708A0B3492B9FB639B7E3C3A03CA498AA71B31F858C6B46
45DB3DE21AC380934B8AB614B5E0C42B204927A503160B7A1BC257C57FDE6049
C1A65C98718922DA2CF651BE594B423B5B548EFCA456C1CE7456048ED9E2B6E8
C95790DB70FAD7D57290EE19155561E73D1C227CBFD912C9E88E97B4EE6AE71E
2F710D6D0372816C0FD3E14D05CF26D54CBDE6020152F0449842130978217727
926620C6338C7BD02DEC1E74ACA254841EA8FC3DC43374EFFE4EC7923F13B828
8E7D7EF94C45167AF1A011226CB48E7B85C52B94073E7FE4B5D5C367FDDFC5F9
CFC6A5136F6692E1A1DF8237A6A75EFB3EA7A7B2C3E4C06C80EED062AF7AC3AE
FF1640292FCBCD1BE6E760F95076333D448A6DD4C063CCF6947EE6AFD9EB4D99
AA36D041274BE930ED9B6551DFC62C1AA128A1F851EF511CA077BBA4F9830789
F47CF3C24AE7E6E8421DF957A27D4658EEDC29216F010182DA5EBE6C9F42FF3E
84B866C2F9CE6894D930CDCC5E673D3E31990FD4320988B3D119B5E032F8E11D
8D3DD2522C46091584E9CF77A97C146971C96793CD736F0DCA363719A4A4804E
0A8EC41869B21791F0C31E7FB671A640D463FADD72D030444F414B1D698A03A0
CFB35BC2F98261C1CE33E5E608073754883F78ACA521756F698DB82FC77BDA68
C4A5AFD2682F5F03AE836B6DCE0245AFD95A26CE03F92ECDF3092E4AF08F51A5
BC051DC97D63BDB53D1488AD10FAF50C939DD0ED4548600088B7E4DFFB7F2D1F
AFA7CC2DF5CAE9217E88C49AE22680FDC80B575B5266C062090D58BB4E0B099D
CD3CD84863D8FDCDFC3069DB2A0AF38F26109B257875921EF74C62C2633AE2B6
A69FF70B72DE017AB6BE444DCC29D3B75A4AC4CD02D7FBD536A075AE986FD9F7
B4417E1873771B1F0FF06BEF12F27F09B04EC110746273787EFCB0B4EAEE7AC9
8079F92FDD92646B2216361832287DF78D3FEBBEEBB0938EA09B9BB47DDF91E3
BE982DCC0A44313957D4ED681EA30E0F9E55841DE5EDAB5629F700ED2ECF6014
1881665D08232C5A7C16443C7C42DCDE549766E4065B277C06756EEF9681FDC6
4301BE275F121A0CD3A487473E0908CC1800C326330D158B2926AEA0D506E06E
3396F40F6496335207E11F93AADF12F82DC9ABB1338BC2C001F379D7F90629CF
5E849B620701C897BFAA3E73004DC19D1E31046340FA30BA145AC2BE425960DE
6EE0FC047001CC349F1AD4B539FAAFA1A7EF617B1E8D2F9384499AB94C34DD28
92AD493E2FF139768C29A3BEFF00B33C4A46B288320F633609D87642361117A2
7D4825D33B511044CB0EFA2EAA7E21D82DAB0A470E52D6CF5B1E1594612D234F
8B3B646112A8F92F853A73C70AE98A870AFE2CE1ECBBF6582493B76EED13AFB4
7691DA14380EF3D87E602D9BE3F645630ABB07D73C49F05BE759C594F6DF950C
A44E9387E3E188F2F5434925692D70FD0C6AB547D55B5E9C94279C25A4A40844
29B5A65389365F49C2C1D70C8FD5B33DCF8074D35B82747779B95FA679673390
89BDF7072729151D0181D91DB3ADA3A31D8B1AF110C1A38F982CFA81B6955894
5A2F3F81FBC2B332E2F4FA848629791AACD170FD63257F54A98483DAF58860DC
128D51C26F0AB182A64B1EDEC34CA441F95F44D3F631657F84F0055B5220251A
86525766C8445B9B19D86B9C290EB106A467359BBA3DADC7859C8DD1EFE6ABD9
F439088514D24F612FAE4E88FEF428B01139C98E5444F5A2B865C084ECA56458
24C0D7CB196801A8AAA273FC5765C671D0138303D6886DF8DD4100081F1295FA
4A0325DF76F7EAE5125148158C7105B6AEE817D46F104B9D3B06490D12F57F2E
EAC565B6E40CFA2EFEC11F91AF0CBA6ED806CCDF6EF52B917A073709C083D5A8
A2952BB78A246E5CCEE320CBEE8FBEFE0DBCE640943B8B487D72FAC2A329EF40
1DCE2987B857B83D541394A8E0CCE7629BDB732422F41EC3F3E51FDB1DED0163
3F701176A8D4BE255E47510B5BD5425143302D49350284BE29C0212267C73811
A6404A54AD46E365DAA1B4050AD1B035895FA627ED5A6D1D1EA1C93BA654E180
A4BE8C50D9A64FBD8B0DAF3F60EE6DCBA20CC5C421039A312A1C8285B67A9813
A96E732ABC1D9AB7631B3212582875F5163629B5199685A84B754E3F0AB09B6E
4A9B32EB232A1E968D2F248344A224F9EB7E739CFED29B4AC557CC8F77FFA15F
DC940C54F05F72114EEB1C639F8178AE1E1DF749BF7861FB23183CB2FDB5EC0C
F8B312E8B8E22B99C1B865BEDF8180CB99FFCD292150645C0E293DD0B8F9AE55
8FD4B5E973BE819DBE06390006C6A41EBA6903260862A2DDB83350907D729E7D
2FE986B6130735FACECB5C3D6E8D3B5ECDC796934E43F7042410661972CFDCEF
B6CAEF8B1F69CF1229D9BA0A6773C88BE0FF9DB6164C69AC1E3EA996F7E03D31
B0408411ECCE4CA7728AA8546A58D15E9E41FD2C4D31BFDFBCD05D841AE44F7F
D459E8492E3D544103A189C46D849625064DE2B0DAAD2A740B6D03F4C55AE3E1
2185DDDE23B3B4D244DCBD8721728F16B6BB1B65121BE3341186607D38E16908
A9FB078047CBC5D02A877A6FEFF3A4F6FE3424F94D8585176FA9DE671687DE6E
29FAA0CE519E080C1ABFD66C8508B04E435D5218CDE00562853A4AA4983FDB76
8B358CD06FAE9113F3D8561BCB983CF968CCAE347CBE5D5670FE847C77CE34F0
14C757F09FC582365D42CC3100E320C8177780A4F1DF5CCA09B91CEBDCD7609A
2C5CDB173D7BD99AE9D1E453CD505374FBEE8F4135397A5573EAB22CE349E669
7D8DC004790906FE014D6B190F424AC2D047253F0F0DFB1A5127746472ADBEB6
FDCCF846B7F753E101DA49CB888E0A28C9990782ACD767ACDF7BBC38A3F3CFBB
697AD6A4E650A8B48D519D1D09265767089988A028F9FF5887EC197F07C4D191
2275B6426B4C197E2B56B9BEBEAC1DEEE2BB2383E5125BA2A176B1AF27821D2B
AEB642DF2E2362A6B314B923FCDEE00E4D31123888370E97C5124182CAEC525A
A46B5503CD0CC8E86602E2825A7B582782916D311AA46139120471ADBBB09EF2
D0DA14F48D9F228B205A9AD92002BBC2096BE004FDE6213E6AFF30166B40A483
7FE5EBCACCA0C87858FA4CC739CBCA96496ED0FCE07C88CEF9B49FADE282B4FE
BF2DCA32DF5867F7A1ED5A6DBEFF7D27853FF4E4D2CBBB7FCF11BDFFAC53F68A
76D621E0982E4314847A753C0621114ABF4F1A9B3C176A090A9F00E07151F46C
5C33365E8919AFB6E52D99CA32B3770939D08EFAB051DAEDB4C0DE4BEC0128A1
B0F50EDF2A810E944747B4C245B6DA6531278E9D0A7F49CF8CAE2F97BE65AE66
6DBB1FB83A1C5BBCFACD9B1B211894CB44304CC03F746AD350418AB04022B468
EF100D52F26098B06F2FF3C8F70F6F4EF8A308DA8BF8DC5FA5540CC308275736
39B4DB71FD533DEDBBCC75A603159B49056CC639E50F616B593C9216304AD0C7
831D9825925E9D784275BB517A2FBD7EF7ACF1356549147F456517EDB1698F06
61E6B7ED27A21299C06C55BDA4D9050C54DAE85ADD3C3E3DB56B9B809BCD610F
524ED08E7243CEAF694F7AF8E188EE112BF0A8DAF475E903C4C940713DA404F3
3030AB0FEEAC2A69AEE93A8D082817B728FEF8FB6A1798BF96BBC6F5BC00BDF6
FC28DFFFEDDB8E96222A8882182F40A9514AD4934E5BA15D0F9E8640BC709585
5968F907500C5867B9A4D5F249E6C8371303E2687995CA318FC1AEE88A8AE0E9
038E7F79E66F145468CCF3B3AB99B5AF32FBFECB87498FC41D0D86F261D37C6B
29267321F5C9FD4EF9B456A4CD360EF6F9F9B34985436422CB12C4488122124B
0ADEC289ECF7C91A2ECFB66EC487617513CF0A688AC7BB6C62CA8E510EEE253E
97C6472241FD60D62713C4749904E4FAE238DFF4783D68148F4F4B26FE7227ED
606E523D7F01994BF732C2BB559154355E74D0EDC087C6BC636BD419322CE8A9
938D82166657DFF608BFA984847DEBD88182C476EE438D5F45D4740D82E4CD67
01F5CD2424B30622F0A4B44E713D5369A6DA00054143D4559287F24A5288FA12
C09EFEE1328E1D4DDE2C9961BEA9F6336840306C580CD57B9375620C1BB4FD03
BAA048740F8E12F49D560B38FAA06009319AA2E33E083EE0CE73D97EBC6B4B2B
8E766AFAF4BBACB091B0912CC6133DC5A062D18DEA707270C539D0908B41F9C9
3116E9AA9CC4190853A24AB543A183C0968BBCDD7147731DF4C4A82FA0349025
89CF9B4CB1142EF2D6008A255ED3CC7BA76C6AB4FCAB0CAF3E4BDE5161A71893
D242B542E31B862301B7C462533BD862A134D45F7C10A279401DAFD54057145F
9A64756B4B5F2119B2FD2CBFF0C4A90232D2FEDC5C89125910D0768BF70C1FBA
3D3A294CB80A7561F0E4E7B8C5C6349874BE1921803619E173F25CA75F7B007A
A88B05B996CC23820770EF43DD15B483F3D48D84730E18B08845F84EA8FA7676
48F6267A9E59BCD86F34F0B986F1AA879C8235E64F76AF2CAE01204D36FB6168
2CB107331EC95E33A5598ADA081CCD1400D4213D8ED33B39DB9C230AE472E01D
A5A455A6C4049F9E370F2B4EEA0FEBE5E929B2BB8AFF8FB171E811DDA448CB81
9A1A939EB8438BB5DC828AA4BE0AC813FB7F91242B511269F4AD23A19D7904B5
0C01A24E863FA6ED30CA19BB5B45F1BCC6F37859464BEF76F72D07DB5588B748
23D290B00DA2D07872644B75830B57533AEBF1D0C3A61A6B674A8248FEBA4460
F1C8F2B1EA77E7ADDB423B67AFA37743B0FC2E8A8E3D11965A09FB3F09288AEB
D1C0EEEF1A77DA1EC39899DE6BE57F74C21A5C493C7AE6BB4F2B0114903A84C8
D328FD7A9BA5954AD8B19DAE0A0B71E0D9ED3B500CA27B4B8D1B13A1C5180B45
18E7F0581F9E701D659BFEE92F1ABA3781E92BA73FBBC97A1F80D6C6C6473409
C182B175FE4BB9BAB6AF65CF43E2EC92D04515D36388F2571C1A3AFF4C57B0BA
713478C829657E7B272CEEB2CD589000F4B07A2D67C54167DE287652A87C920C
AB3105822834F15146770205162AA8E6DAF582BD5CFB456CEE5A8230AE0E2B76
BC34AE1170D2F0762D2E01921AE20F42D7ACA9B08DBCD1E7F430F3CF1FEF20B5
16A7A2DC8A33CEBE17A04058C1411EB729F7E857E111A0605FA5A0B13F47660C
0CE99C47B73870732540885A6642EFDEB271ECB80D40AD7B2EEDE0623B1E918C
D760EB59CB3E1142D9E2607A275FC2A5F2DCB322769F731D75C9CD895B04638A
21D477C391C65D57E776AC47C9406C0B22CC6705BC9F512BA4A77D9257A91C82
20DDAE827742CD66A9B16D4F1DB3D02945D3D286CC2CC6A2BC7C2B0025191B56
A1A1DFD4A358028C85AAF917C502A99082C76FCADC3E8CDE470CC62BEF084948
61C1E813D94EB1810D7A7A3188EF941FCA70649567CA0329F5A3ED8B863F2A9D
A6CFE260F11E378A10EBF3B3DD5BF31D5F455F4DB07758EF1EDE3E1833239D78
BD0CA9BCEF75059F1874DA48C10C8ABA3F9256967176314932037D09BDC0F018
8D35E0002A34582FC6EE3AB99724D48DA39B9558FD8B43D8CE0F1710D5C4C46A
57E008F42E266DAA5C5180DC4946E51A28FD4F6224F31FCD7C497564B95F05B5
9ADCB15A7B5F17C099E0BF5FE0317B2E6B045C7C8A545EC6B50E7BB086B770B4
C33EBBBB128EAA129DC7444248418A2037409F38C46E7D865796A673FE5743DF
B8E268DAE2F78C0A1B6B6BF7290718EA4B0574086682559369FD11F702C237EE
60AA668D64AEFBE913C05A0F517BBB352C6A7821A7DEADEDFF7C66F08E1B2064
D79B0A06112AD860F2232273CA41ACB106319CE2F714192B93CBA7A98492FFA0
12F34FA5E85598444BFB66FADD1AB1D122C1E2E7D3CC9D1C7C935F97310E9857
0F8F946DE74DAD360A54334E8C9859A0D7E8064B39D1944F27D896E312CBE98B
F4B27001757FCC63183C466A7C08DB089BD8152EE26140C939A1046DDA2E6ECA
7E886DD1233652
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 90 /Z put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD2E141C0A7B647030FFD1FEAB8CE703C40802E0D32EF0DF87BBD5131CD110D
BF5A11D66FC2087779FCA72E245C6BFA23F60759FECFDF932C3026D4CC21D843
9789FD52FD7A85BEDF58DAB6334F4880C2C99F49C0F64025C76E0550BC4B8AC8
5C7E817DBABA0E78F36954E9922286067E92E69D23E9FD278CD5F26788A7E5D8
476DE8E21397716DBA03B23D85CC8B701EAA654C5EE74F40D6C3AA3F46E30A2E
E663C2CC64E2DA3631AB809AE1B70CCD429EF7488E7E5C782C8311B03F19DC37
7EF382AEBDC3130A05259B885E07B50701A7A98C5B2D07896534AD7BCA233A7D
21FDCC48F92986F516F8F0DEBC65DBA894F62D4F97B71DB5E7997AA01BEB3633
8CB0ECF40BA2317EEF6E9C1990A0DB13C2E333EF5AB555D96857625F94704D50
B2458C230E667A48227B1E23C26B4279C37E2773FC98BE95AF020AAE36B57C52
44013011F77097628EF0DC35BBAF357A32CDCE079C1047F1E55E05DFE17806BB
D95A9F649546B511EB8A3C450D5149FBC48A0AA070B81D15F77A50455E7796E5
7440FAD312549981BFD94544F044C5370A36F1702139E5257A306B73E3ADEB90
6185A7FF189A2D07B80DBFED8DC090734AF589054EC7BC936650D9886E8CBF58
A245A3E5D702A56FE7F1F34F364F7F4DB5105AB65C49EC629C7351E07629B6B8
7B3212A25FA65A174D50214C3B6700C19EC278E17040417F00831F228BE1C627
DE1B4C0EAF6DAE5AB9F2608799BE1412374928E38255CD353A28EDFBD26BD9E8
32AEBE456D95DF62A4ECD71251CDAD78D523D4DBE735DCA4A36E2397BBAAD2AA
D783FB40B192A43BB12ABBD054B3A18E32A39A0A10A965FF9F9A0C1676470BFF
92654ACC61BFE6439176A1520B2C76153531693EB831EA9A11573578EC12881A
8B0E5D4A1F10A6BAD80CB72BF357481EC47BFC88E02BFB64D0A685F3483768D2
2A41FD876491EC3433F21293996B68812439B3EB2586EC6F4F6A077ED5D0D592
1614A3C6DA399F90AB008D16B512781EB7E8CA56445D13FCB6043D317B764636
9226C0DE7F2FD9110FF0C6497AE4ABC08D103543A6C0128BF920B14A3884EB57
566C05910A3EDF1A470BDECEA2E5B0E81CDE3357CACA166F8E1BCC7232CCBF6A
46A270E1FD02D2A2C79FE3B1C042760226E227B150D542CD0768922307639FA5
78FBA04BC8F22A6437021A00F63DD59C92BBB6816873AE6EC6365E7783782D4F
27D8F303AC60E642966D6CA131DE086FC92C60E203A4C97F3ED3DE54D3433FA9
63DF13B91D0B53F41B0F8E2421657F39084D8807FEA05538C5250BC5C159EF38
F48EA91F7046292C22EEADEE21C9CEF7293A98D392F722F79D1AD81F4F5B5974
4E375611C4FF3CD20CA05097A5BDCCC75934873377ECA025BB10BBF6C91A870B
15DA3355D62D77528D37016EC344802087256DD37008C46A8BCF2580669D6B47
8EFF4DEEAF56924CDBC13D39135CB22A6FDF31192D0EA116F50EFF0A9A067C2D
EC6922035773A7E4477286EB7914B7BFA7752DBB2FBDE0C92ABAA70121D7A116
AB9DAC48FE8FFDEF4980E6BC7D2719566638FC0155CB3FE976F2269674D819A2
87E3F7630567139F377CFA59EB106EA698EA5AEF41C9ACD09D40CC333D2C827B
69B1FAD721225D4848C3858C524A6299875188389F347C277988B4B63432FB94
36E302B0772B291F23EEF8AE482E452E3B9297ED81C3EDC7082F1CEBBAD66EF5
FDC6987173D08B8245D0BD395C8C542E13E73AA4943B5AFB30D17CA84B269685
D3155ADBE09FD611A221AC3CB4A294DF5285001FD8CE1BD6DCC6019BF69FAA8E
DD9DA1A4D88DCBD640262F001950A15EE2C1D7470FC24AFA820B6E1734A651EF
BE49556CF1D784315EABA35D24773968CC39AD2A65E8B2621B50A266D557983A
BEFF384AF0562C85694C448555D125D41EDD5BA9A9D9731F726C8A22A25CBB85
5A9729BCBF36FFDB10B4A2DCD1251C6914A4B3BB4407389869A1828EC8EEA50E
7966436A542B560D499C36E24B2D79793E60B63F0D675F5B4EA9E07CBE5073D3
2E23392C25ECCE63466CCE9C8A41E7ECE431A38F359B59C7897FB594BB281938
985F7172299BE1DA0569D09F1FFC88DAC30C512C049828693DC81DBF859C3CA9
F492D10F919ED661976CA3B2B5032D079A8BBC6F85E95AB41C9DE31FACAED11A
91E29D6A6A7C4C829BD9A8B1EECC298F55F9C041587D654552DAF7777A485B83
BB89902B645DA1588B10CD0A5FE85297A56B499C22D75108E80DC1EE2BFC6AB1
4360814EAC79D83D9AA2670EB15576D4D7738313B1825D1E47948BE3339E3F18
297ED4F4FF1415DF7BAE677705B5E411419154586E8161C4AE98BDCC57758A0A
83F1D7081A9A04012CE41C72DAF7FDA385B292DFEF1B6E784EF44201DEF9D93A
6F97F3F651BE98C04E330ECD9D6EF18E598E56B25FB54BEC90BB8A3C9A317CD9
A77147AD0943FA2AA7D9937E356D30D72C83E923B6F0939C22B97018B887C297
355E1E72DC89C340C17C50D2BB1C315F90C8D326C21BB30C76AAF4D13F485186
C322446619B0EBE035108EB0273442C2CA4F15CA014DE2F9E02D424311CE2DC7
7BDF2178372F086C0112B3931B89556D8E0E3DED7938028486352F2316BE46D9
AB7FA0D3F75EF9F9B35F6953A7249B99838101F394DD345956ACD475EC2099B4
6D4EABC411A2BB029A98160B19C4CC6D4207E4C65377C017FCFA2BC148E091AC
746903EE2DA3CE1807EDCB152B12386F19F58EE598B4CCFF86E325FE8D6CF32B
0313D8594435B27B5E7677041D1331E79B9E897A9A75520934B9436FF3783E10
A32399920AEBEEF525B54B8FB5FBF3CBA5357B2A4A2E2E826D8984EBD346EA38
53A4D37E6A4ABD45FBDEF50F9B8FAB43FEB316F21F41DBC13AD5853A0F11163A
60C3D8A7662027A90FF05465DE288CD2837CF7D922BFA913F610E4D23E5340BF
A11A106FDA052A1AA2C3B94C302F2D4EC232D89C4A73E612B125DDF93F70E03B
6F6E8724F4254B554F4A167592EE5A55655136192DFEE28D15FA13C7B1D4F5C2
E6D3FA7AEE2A0D4D94E53943AA6745242330D9356D1669DE0DDBF3AA0C172E16
540EE2802B15C938EB457ADDE0C5F4ECEF3CF24AD9E0E07696962EED3A8545D7
D1C21F84B7252BBF0EAD7307A59069F8BC0C050B530843145F95332F1BCBDD38
4A2992FC7C18B498509D4600CB44B6122EA6637BAEBE0E0FBA4303C92B7FECBC
4661493CAE7D9D4C0ADB6FFC0D2487E3D51ADB0C1B94F2FCE86EA8929A1B7304
58801AA4648009C1A01F1DA5D82B4CD3D6820FB7A9890997E8F46BDAFF437561
9EC5522BDF26D3E7A08534B25BE80AA32CC70E6834F8F234611A6A981DB0C6D6
EF1AC95C8396BBD9E95EF4FB0A02975798DADEE8EF4D34E602DF6D2051444726
294E1FBFF4B0DF94C3AF863049F22B40401F3C5F342B081A26161FB02A95B80F
B5DFCDB25ADC28748F0223C2C92B01B35EDB1F17CE862A925BAAAEE6C48CC865
12E0FAC32A9D2ADBA6397FCB34F018863A6645EA483849A4601D76AABB81F47D
B45507358C91CD4F674FEC52AC5B210103FA07EE8AA0F5EDB5A7278EFB6D303A
95720FF5F1C45D0D26E000F74AB96D945E03A1704F82D92EE46CA21E04370060
DE30DE0D990D4F6CA41A164D84299973188A5E69F58458C982E81DEAC75BD25D
51283D153D4DA6CAF8B9DC4BB93F78912F80B13722AA2B68E2BD89B8CB66383D
3AA05B1C29113FBB5D5A5BFFF5ABFA3807E62D4B308B8DE07B55F52C7374BF5F
AADDDF86F20CF52AAA754120110E2A360E9FF1FC0C49FCFF870ADD2EC5CFF003
B9108242334E9B7B302C3C67DF389B7B052B2AF11113B110170709AB0F231AD3
C62561E0CCBF8EE764FEF1095FAA0FE8DBDBCEB1877F4FDB9705CCB34DA1E7B0
9170D8F94568E2E17613658D6EB0D9B583B67DC6CA9BB43EDF94FF8F5F004795
F0235EA1F4DD29FE34F2F73CB3B10777D22D0849DB98CA0D759F491B2BBF5562
591C150CF1BE291192AF4F026E3C26CCF93854C8CA614AE66AF59002AFC18D6A
A9CB15A8528D2DD9E69D9A732AD594900BED1B8D7AF5657D92B6BD7C9AD1AE33
54F147590A79EBB52F78D38EDE06B8280C574FF5BB2DCE607011143D11D3A628
25D166B48FEC388BCD1D3654FC8AF83DE4D497EF2126123B7A3B887CEE5FE60F
A61BBEF808FD3D1A4A5A2DDFE102B3A1C4DD796F09157079D53D1FDB1F154649
D63F4E17094318219948A5D1BA1996C1945E4F410A575C1CA20CC346FB76D458
A4B835E4D72811FB90C66280DF9B329761192C9A1B5EDD1EB63401A5D24667FE
CF4ABFC8D8BDFCE5C784E6C4D4B9347D0D277FABC29F2BE5AC962A1C267C7F45
BC3F452B58BE15FFF62708E78734139E17C11ACCD7A9379E84D059545AA6EB28
036CF40BA18FB93C6D6367640A8791911193DB7C172FAB8D553CA6B8226998D6
B83088CE70BC72CCEC150E86AF092881F1460FD17C5DD455472529BFF3FE5F80
2C16ED301B15C33F04523F6A0F33A3EC1D2B51D8EB622CB6EB66A53E6CF8C13C
BDC132F1883A9A1530F3E5EC0B9E589D71C0C3B44208F04B9D8AFE0619CB4611
86BC105979C9430783D7A778877065C3AF8832103AC0A9C90E49B2BC9D91DAA0
BEAE684E9F04AC35CA6C6957C8C7D095D21670F990C590941FF27CFBDCEAB386
F96781F57BDF4DF04E4FD9B8F62EFAE1F248F4798182B9D31870654999DAAF92
85A31C1CE109B61FE3E005A00FF3DCB845B7A2DA2D74BB17E999E695F023A436
9A282C0FF26228BB83BA950E06F70C0AB82E9B5C608ED3EE7A41F8354C55E769
47A884FDD0E9E067754AB92226C4DA3F70AB0FF70AFF10C051D36B7F5EF80A53
99FB88C0235122BB69777AA5E3AB1DB4855890D309A883CDBAF247076A5FBDA5
557C8FC4BF470C00EFA168EE235C38DCA3CEBBC12B11076043B9BCE1EAFA0A0C
197A4BD523C2D39A951F2CDD35E071DBC0581905B2FA53CE1725E297AB2CE7FD
B78BE4C16EF61CCBD4912327B506C7080A6B1AB271BE3D114D77D17EAA35BD7D
25DF7CA1875B3B115F272EAED178CE02DA347F9E560DBA6B830BEC7A2C14E8FB
CED614C63C92DCB08C8C23E02E10B10587CABE9A9AA217D9F163A3C3AA82433B
14F65C41DEFAB0CB3A5F03FB092747F690A808BA318AC1A69A48AF719150FDB7
5204EBB6DFF48C66A10CA3DAED1112C1E1919236DD2CA07DA7BF3CA37A79B310
80FEF1456B3072E14BDAD280BF143D49BAD39980F76A382BF232C957F6734381
BD424A9E706F48BE6B19E13D6383F6A1A49765A661962E0B874B1C6FCAA808AC
75D78D697A43B5EE7E818D197C09E3658C6D3BE994F806F35BC208D7564FB683
D187521B6E9E2B36DCC23A17FEF84AD3F68789FDDE21DC2B8D1CBF68B5C04D07
A50FA9B169CA731A09BA6164F420E191119FBD6EA6FE7210F7770E4CA8F91F34
F7AAA0BDBF9F40B42918A400141CA05A91C5C4CB11FDC21EC9C655E5A9B632CA
6D0B8AC6E31D6435D6034D22C11E1B215A899EE680B7656C5B86D93A6A080523
5B6811F7CAAF2260684C2B346C49534447F67D866FA9F4490F24184C495A76EF
E9E475C5B4227CDD1721722BFF390E6ED00B1F476224404A748EF53ABAA29E34
BA8985FFFF969679F365F692C2C61CBEEB1D6559930AD41DD5C1B7C4AD2EFEEE
AD51EEC10537D2B5329D5EC8702FFED915C29B8DBF686ED60ACAF5C2F5BA0530
393695651EB47C353BB4D7BFC7B465132A3577717202D436A54CDD4AC820356A
EC5F162F1508AD11349802F1DA43A534429AB6C10F3780BC2E94CC39C1F28C3D
6353AC338D51C3184237FDD89F2DB78993D742231013B3B68EA2F3667F5145DB
C7C6F861E75B61EC3E31E3ECE1B938E0AB3A6270A9884164F37D67ED1C59989A
186EB37938D960F73A3FE4D5DDFA14BBEFC2A111072F863A8D6108EF8B8F5701
C3B60AF89AFB77C18B39FFDEBF93D52E90E9FC57D342337280E1C8D4329AA529
BF9CD2301F7AD2968C5919D1E97236C46127A4D8A5BFB345AD3F352DE8BF0C4F
36351127C8CE2E1878BF6C879D9F576BBB323A7FD87CB5DE1798BD481EE433EA
8541CB78DC49880C41AF3BA9543DA70714E0DAE6D7FC5B97E998DD6792979FE4
919B5AF62B7C6505642EAA0161BE5174589ED38879C4D3DD6E8D7BCAD4D620A5
4D10780B33FA209D73F2D83A894C7CB1C48A7A5359D68F04995A723152CDC6CB
F2CA7377B371FEB67FF6A5A7CAC0705FEFA376CF0E74B20A360D86A6335F4E0C
D9DCC18D84AA37E61FCC4D8E6430A5FE3EFFCAC64F94F472115DD6CB918540C8
CCA97F669E11F21982A2497A37EDF1328474E88C1F15696F929378F94FC3A4A5
E3C8D22DDE6C06964832784A839E65B2304B85DAF14417ECBE9DCEC81152A904
649DCAA831B43EDD69FD2E58BE33DD8BD666815FE552432677B39C4CE81E0873
B36EC1C36C72AA60D275272C02BE733851A67102EC7B875A25B6454B3FF57AD3
ACF07AC5F8F3444482072001EA1E3F4C9CE68AB8DF514A06DA85DEF32CA623FC
3D7CFFC83D905F7ACB8B5396654CD164838A27708E6ECBA2ECE20C8407A3E602
FCC3F1FB0995DE48717FC4A86D25B81D69B457DFBC5BBFD120EED7787BA4A960
C0C078FCA88C09E0E746795980D6AE701EB5C5339F089C4DEF40BD57E0DD9896
BCBFC440DD9C01FC39DA6D8E92E0E9B2461E0C0158BABCC0C556014EA083505F
E2EE7250C37D274C0668D628E7D57945FCAB5BAD104CC89FDFCFEE098EE57B52
4A4A6F5B64162B19300E4DE3200A5C6A6C8E2E61890B494E7E31F7C63BC4DA2C
31D6C7AAB6C1DB4277C1C9F8A54A237F1AFE201CBCDB1BCEC0AF2DA58B5CAFA2
94C123B9374F6D53D1AB85CF343ABC2C1C742B3644F81B3BAC4E6419A8611C57
B9C431CE51A52BDCE1756C6AD288035305748199FBB84CE2E2CB6B80CFE2427A
7CD5760538E3E6DA92055DDE1BC1195C94CEAF4FC33819BA2EE320DD93814B1F
8E1DE1EF8A18B6ACBD436B4E47E640490F7AEC28447BAC9E0326D67AE832E279
5BAAAA39FB5495EE35FBCAC220C82F6A1891500B5568A85DAC9D6FF9DB52D680
A0B3E22399D0D49CDD80BB3E217A083B6496E4785E5692E495BDFE938F7C818E
C26059ED6E3DC6D7DAD22312CF17AF2FD571B4F8923F9F892068EEDE2BC7F5D6
A35AA244C80C63C6BD3B3438935B3BB81462D4F9AB3683DE33C5328F040E6A48
4D954649DF359079F62A8E3AE2CFA091059F84BEBA17BAC65C073A18FC570AC3
CB09EAD2BD7E1BAE03B493086E8CCBA8051B66097F41AB0A666BD69A21EDB224
FB6EBC733E056839F9EE6E05A22A99888899F58422D1DBCD39C6C3E084658607
B4E417A1A26DD9EC4DBDE7DAF1FA7498E067C19443492FFE4B0E9DE07AE22062
5A1D653330ABA152AFC1A1EC5C629EA8EC33A0C37329263B7D1C887653B2FB3C
27E7946A0AEA23DD929D0B30796D36D9771C9BC7A3B329977442BE11197F1B9C
806BC9064DEBF04A1B3E9CA96969D627A4110BA46E13F820ADD64031CBE7862C
2FF31A3ACE09C426F4B424CBE3688887530D1F8D0966BED0E80E0D3EF50EE500
55CC03C7AFB934907C519B5A131E473E7B53653A2763F6D68DD4810232EB376D
6C2265CD34B76AA1247A59E146B87785315E920A52ED7F6B3A61A18BA056B6CB
93CC313CF113E3A2F9FD4AE2E1C299ABE10B6C3EC4CAB98C8DE384B3594A4264
45880CCBF48CDB288EC7C61B483DE9373F0ABF1EB747A05954D0BEDC0B2AB518
109FEBA269A80540925C4B3F869E27464D3E88E296A81B0EE81032472CE14871
7126DB97D1B5C852E9F1EE2E0162574C2ECC89FD3E2851FB6433FCFF17FA9F44
F8B7E82254AE1D561D936B3A011D4B928069DC6A2EDA5CF46395CD3DFA9308AC
01BEDD848262589B85311A3ED317B0A3597661A77E303B758BA8DFFC9E80647E
2893108263D7716D6B0A57EA73AA494E98375FD54883353823232EDD69A71079
F3F08D2A914E79BFA5EF538475DC61246ED73468FD8E991A1CC35EE0593BBB47
FEEBC7FEEFA841B22745BAEEF9A105C9BC376793B9B57789CB39B25F5BDC6B6C
7C13316287CA2112B467A7E9C000BF017416B71445D8F0AB0E969E803A08F06D
B15EA6407AD739632576472D881B6F08C8D587416F00883A39E9658053F70CFB
687DAC20D254E02CE00AFE3647EF1140F8F1AE638D0B783438A5D231DDBD9390
0EEC69E8641B2E427AFEC0959E9FD8E083FDD39BCA2BE3D361606250364132D9
56FE9AF6CED411B0FC0936406D64E8F67DEA18EA54D2312122F88652BD469E0D
A479C77ADCF91383BDD0AA9C4377D0B0B29A1C0FB178FE4B77FF6A496E7C7717
3A0C7FFDA834FEFF32237137DAEC6B6F3F69C06D5A0EEEBC7CF6683CFA272BF4
7CEFEBA03F1B5F111306308D3ECB32A47C272E6213FE25549FF8D3CE0E2C7F46
85AFD2BA202CBA9DAC0EF6C3C13879C3E3EB997A41FDCDFCAC4421DEC39E07C6
74E839C1BDBD79ED2F2C30ABC7B233B337344061FEC5FBB8C03BB47D8733FE9D
22B8E594E25050B52CD6BBDE6367B7FE0356F24E7F700B792D3B93D098B2D717
14378539C64A60A992E981D9A3E58B027AE25BEBF113F3F3F28A172EDC91EAE0
46E1A0ED6FC1745FE5E6BD4FB09D394CB7B3506D22D0AE5938283A09A58005A4
813A8022F3D0D3DF626A408A067EA3432DA6EA34100D6557671D2AC75C36167B
BEF75F3E0825E49DCDDB02D39037125336EC7178A113BC0D2E0E768A134DBAC2
30A5B148F635C8A0BFA006A8F6B6DBD59B5227582ED89D724C75EB8DB8A6B29F
705843B39C7712766C7F240C9BFEF68B1B5CFE4BC53A334B3BBF693FB6F7D540
F8DA79C6F13243E3AA1D863047ED474E47B249EC7C43234F2918E63CC477A34E
1FAD985813EDDF7DAAF4C6C6285625C55C33BBBE8DECEC6921D2A92F1B3B4C84
38BE1B69AC401433D0A2DF00E9BB63AFBDF76D1FE2B9B0AC3B902D4C36B01B3B
B20B8B126E2CB3D22B2BA3BD6B261FB5AB6222D6CCA64B6C0F10716DF4B8CD72
5281432E625D2CD642FC44CDD59DB3AFD6048E011FC6F240F9687FDDE76FFC07
CC07A57E5F749D6FEBD05E9004E6D2999B97296910B36506677AD34BCB7EC684
8E8B489DBBA98B855EE461F48E393C7BA990E9D223551D46E821750FAFBA8BFF
C8EAED52576E782ED281FFB392D6E9F886CD36BEABFF4DD6EF714E9F936F16D9
58E69ABF643BECDDBBD09398B70AD46253311237DA185A0BD8944DCAD7EDF228
8AFAA85195A85F1A0BDC188D927CABEFE11F00BD7E5E9D1013DDFF8538181B8D
ED863CD6DD543A5B5FA4119224D9A733E3E7A09852346E1388FC3E6C8791C118
D7F463A3BFB3EE2DC48184922210B393355802E98610C3F279873B1BD5E4E1AB
70AB3F13D939B02038532904FF8DADEC6ABE001B10CAEAFE68D90D790AF8B4B2
44331F8E9686C4B8A0536EED2FFA0C82141181FE8065B1CF56C44F7C627D7860
3F8E67543CF45A934F6D481EF134D84F2E13947F237A97943A4781C53B925C11
69E73651BCB5DFB6C59C064D252DEEDB73EBFEF8A7C8FE522B9FCEE74781B76B
6A599063D212006D97DE639A469240483A34BE6673EDCA4C6AAC425323CCE596
9D4DE8DDF2D88484AE289CB42E67A4C5698FD59E6709DD722095DBEF3B942E4E
5955DECBC634F4CA4E8BC1AB83C60886AB982873B6031E3E416B4B55BDBB27AF
6659A56A93A807F1E78E4C9FFEFDE3C3715EB7219188000EA899D61881152A3C
7E654F802F8390F46EE356EC31BA88221FCA143C6915374B563E1187D6702DA7
23EC544BD9429B7C2CA4E79AA1217A836DA70624B8A8C14DEA9762C6D63E765A
E7FEAD43E7B58AEDEE8CE96D1DD6A4579FCE63EB354F269077A302511DF72F2F
70F4942369C3CAA8F041B57E1E97F911F4DADCE1574297C8DF6F7B9CEFF70680
BE2B3D13B911432BCEF66D2561C1C9F1CFA89F52E056748AB87041A9F122A322
7040663C031356EE7AEA3422A9B526D7A2CC7F8C544EA8CF647C815BFEFCD67D
C16E951ED26A66AD217E55C90125740F5076334995E31BA817C7DE64467B9B34
B522E7E49D1BD24E230889B8D0AEDFFA848E845B6499B505FEECFD39B13CDD0B
985ABE804DE2CA7C360A67DCBD757AF41CC371900F0005C082F06D8A3EB449B6
EBA17A3D28774D6B6826D233185D44F9D51DCB363154FE263B0025FD4D7A02B3
B6BBC739A1FC81DFC4D359A2B0C996BEB7B7EA060B916BE9AC8223A414DF755E
F00C7370532005962A0BD5CE3739B9F57EA021D3A50A2007197F3CB986B71214
1375D0194D91FAD7A39364775ECC793E58D2EB882B9CDD96F2B6966933920E54
B999A8D6C139EF732D3606C7DF3336A60FA42AED84A465544DFFE4EFA8433562
8854353D1245ED78D1C47634A776A9BE66E3A144F0D97FD82FF1298BE7F03822
03E6CEA2BDB980F6745CECDB27EC32B263EE45254F4E84C05497198AD1098DEE
FF9EB9F5299E3FECB973DC5135C5E546D2BA6195D28EF0BD16DF61FB39CC92A5
DDF1EAF32512F996C050EF763BD3AB05AECEFA04AAFDC1B73910144D0EA55872
743413D41A5656CB5937D4C871E52828511E4B2615110E1589F8BFC9F7D175E1
27E556FDAE9E359B1D2535962476652B5B49468EF23C20AAB8FD4828BE15DF9C
8D152CBB7FDFFEC391B3DC6641DB1189B8142B721F1C551F873223DC963DC9DF
FE528DFBF63AD57D6476B774BA46678C9C1809D1BF2CF07D54575E424998296C
BC36CDC718920BF17D40CDE5A32ED0189D6293C3B74C5F7A0B666F29E7208C00
82C5A34145D879AFFD971D8F612AF8A350FA2E6C2799462B9D2E6BEFB4942707
FC84C60EF2441AEF5C954855DC718B805F4BF18353316A596917835620AAA1BF
72D1279A9789F21DD91C0C9BD6A3CA662A29E614BB80FD024250AB0366649E04
D90261141E546AB5887645F6023DF02A9C1D9E45E6855D416F609C27A9147FA8
E2BFB971C093BB906F1D768B371469BFF65476486F964A89C5F83E3E8E399BAA
B9F60E02A402B8C3B6CC4B474B12CE89D5A952FABBDD6A1818870424F23575E6
0007AC450B3664BE8E8DA6DF1039A9E788E64F18698C788BD6AC93829A189971
F38A8842C9F15BBE5D95950A0DA8590EAE1B2933D08969E0BBD809E3813C54F3
820807384E884183DBE88C36BB2AD945C9BFDE91F76C07DBB8406E93F38BEFD9
D28D7BF94466B0F6E062C1D0C3AB9B4755C8E6FE8D4D2276A03A6E9E6A894F8F
458C56FA308A15C77DD9F013D4E702ABA6948B65031E0B3AEF1EB04D0708816D
6BE7A6A3267E137B25100B7CACB5976082A6A8D0C80A63C760B1100DAA9304C1
F1434A6F17D8CEF3C8C12B27C54CE50BE3E2ABC08F1392F40E07E9C277148A23
ABE5ABFFFCC255DD1573C3A86FBEFE0862243C9F4CAC9E2796C16ADA5BC368EE
A8C1CCDE8F284DEE2F813E7C0DDC86C3AE26DF25A0E89DB16B2E53B5EF7B8DD2
4EE0FCD4B2D9C3EB029C3A92772CCEB07AD3315375A7A59B074BF68E5FEE0EF1
33419DA155BA726CC413546F9E55C99AACB9F9190A69F1C43F72A8E4D37DCA9E
7C29E957203D07D51BE96A9C8093183DBA2A2012101980C5FC0E0D5D4EF5E4BD
8AFB37941E4D74AE70D3519D9A35A458618838FD6D9D55F29D3421019F040CC6
91FD2DC38E0C0637BD27CEBE8B13D70A7925401B1709F7F7D229D43DEE0B4563
CA85E5EBDD0B04C3D401C5B4A9298130EBE9C911BF55BCC956CDA84618DC71B8
30CC94C62E3576B5F0209147AFD05532D17CCC108C439F51C3D7D4D65742C3DE
9167ED5EDAFDE9E35C9549C38A7483212DF1E638A589BEEC0E7F722C948EEE49
E22BD9C9BEC71F2F4AEBFA983C7B06DCB918C8C018397B5E1474267D1E96933E
AD14E4C76A33477BCB7699A5FAAB395E693AC4B53B9A869222D13CFDF5997A12
2E9D704918E1B3A1441C1D82B813FDB321079389E9841C8E3480EFA00AED6792
95EBCA7A7360ABC3BB7738D07CD385218560B2CB4C72C0E1EC8B50B8DDE91DF0
5EFB6E8D8C95AB1802320FF68435026D3F992B9EB0FDAA8A80526DFF4706F7DD
1441A75E56FBC23D68213A10BE5159C036F69C11A8A817A04606397A645BB1B6
5D698F452B7BBF726627504204B2C06F0BC1D5C2C1A72B293924D855DDC6B211
EC21AF52F3B8B3355CAB236AAD58D76307398E8F02B0F3954E668A990E6D9864
198483A0D899B702786EF6B6A347EDEFDB7B763259FEF50B9E893DB02796E6BD
D4E55BEE50020FA618164CE29A172E48F61E0B528F487309964FDD4E9D03A0B1
F84FE3B7AE28B51F7057A4E3347928A5E921EF99917005B53AE5FEE76FF11918
1995A1F768EE4266E2B09301CBABA1F10AC1A3CD54CFFACD26131A030CFBFD1B
771A593C905A1C5A28EE809D512F36443B2803DE1625FD03757A259A6B7B3580
3E766B33885E363E4C90F0DEB8AA14B8BC234825FF82510C8E2CADD506B49544
8AECF303A83F7C62E5367D2205D21E0D8E8DFAE42CB6925C33B0E6796FA4DE69
4C8D9ABE23E66468D0876BA31AE709B960F4DF37BE2236C530011BAFF873F33A
D6DE5B5E393334F749C9081A5E0DA5C387702C1DF8A5FC195B723F7E2FE8972D
09435E6369DD24D96ADDEC049DA6939EDA5BFC001647973276E88BA29AB9DD3A
40103E8D91D060E6A3F499A8708DD1D9FBE581D88D66410ABA359FABE780B072
F2094B77A6C182F90A33713A88605A6C855F0C478C59DC465E4B4B53609BE572
51EFDBEC9FDD45C77703AE3009E024BA540459392EB0A4F9758B432BBF82AC15
A2A38E74D84071A40197B63A089F9BC2071A9BE31002111487967ED65FD20122
9227E21126B61BC88397FDDE6C6E359DA3C8685BE4248FC282B40B3702A05948
9F4B1E049DD1A765506E3E1AD76D05663539DC93C02EDC2618DF38F365B03A24
A5EF849E9F4C8BE37408208A584409B2B86964A15970B5EC049EFEA7DDF2D019
2694DAB063676ECDEA9CAF626739EDC938D42B8FF5315B52D4A93F535E22496F
88F2377357B3B36D6C7ADB14C048FDC257388CAD1B7C017407AA5BF1799C4087
7B5449320686E3CAC250A3B7DA0BD53EEC0E692D78E3D2AFD7FF52EB24B8EB30
2BFBE723395D34533A2D87C44D03456F10AB8F06228E658A08448146E67B3DC5
F105EDE9404073DC16D759D1C111DAC45DAFEC02E0DD0347AB38EAA38BD6E988
ABE77DA32A5674FE12863A67FFE6FBA610980EC8394A2CC215E2195C776A56EF
F668E4B5CB3053926BF4350D3672DF382B433DCBEE7471AA87D3AE9914ACF9CC
416E0045BAE3717306534135BE0DF30607EC09D7D881C2A66ABE9DA86B0206A6
7A3D297D5BD8C39B329B1C8297D3FB4EE4368CBA5F5335EB48D9A0229440F897
8CBB88B54C1D7F3C76FCA3C23B22DA0FD52DF929427BC1C5A2630C9EA09CECDF
3E515F56AD9BADA94D3BE93B2F523FC9A846D1A3C901E576B7E2A2A751D5E383
AB2553F1FDAED32AEE45554D097E65F0944C089BDF4AD787AA791B73A8DD6061
5FB9C3AB552DDD5100E079CDFE808EFB4120D0FEA537C272EDE22D3E8A1C5D5F
0BC58BC52669CF8D087C099DE8693F444F0082F064906B0F285CA85A9FFB40DC
B4AD8F2771CEA14318DAB4E3CF96C98D200F12F2A38F056A5ED91BE5C1216CCA
8459275714D8034ADBCEB5D441ECC9C039EAA62B8D5E7D8BA694B33600543D6A
49B1CB50199BDA8F140152D7E5DA8F8D0D25DFE9CC068F8881FE81265E7C61C7
00240C138C54012C6E00E071E35AF2E8D71A8DE34FF6F041298C881236798FE8
52276FC9C8C2DCCA72CCC220B9F10C905E497988D6FE1B9EB287E64F1CDCDC9D
881379487F5F5D596C84145D879F2E5F6CB58524B463887D3B44D66898BF8A1E
760C58D40F8A3B31E9D1E243C99121CF7B9DF2B8639FA7F5DDE50614A1704B50
08B8FF5910F3A395289A16C711AD8CFD8FDED3CE880AC194F82767760AC3448C
87E089D22E91811113FAE358C5E71F63F2189D3214689F61C0E4A8BD7E92C9C7
147A350414DFF52C5C7726FCC18652CCDE000EECC4348404FFA40C45E45A5381
D7E8DC85040773F6EFE7751CAF1835BB27730C2A3EB8C9BACAA01BDE462B85AF
E29372B07FBFF52C9B7AD332D92369702F2166C5C38A822D057FF9D28721715B
D87B2BC7D81A33E7EE85D14FF0829CDF1A5ED5C06B638CB9E83E3C6A0BFFD560
419509E8B686BF88348FC7D1D3EB3DB962C195EEC15C1BB5917B12746664AC2A
22631A78D7207F697033E9CF7353102D745BB392A3CE4141167CD7D48C215E50
CAD690D5253266C3963AE488D6BB0C9A4345CF6EE72A1C9063E3FA07C7BF8938
2275E38009F9C0FCE20644FBA39267582D3FAC9F039B6D5A7E032CE41DE18A62
0A52189EF6AD023B5548AAF1313371CB216ECDED4035483056B45752DFABDC91
6628FFB9E010201B17C1F0E0561D4866EA1D0D02361EA261C99DB012E30C506D
696536299AFAD4510222746E679C72F060F94236CC9FDD663367D7FFC1242BDF
DDE696ABEE7008EA9F90106F148035A33A610D9C940D088EEB2A4D518DF5FEA1
4E02C930AABCFEDD0D6FC69067367CD887826D6ABD5655990667843A6614B91E
378247331ACA6BD721006D871246899B8C03DA16D7DA286A75503BBAF7E09157
94B05A84F6A1DD47D87687A305CE4CCFDE7B8AC7DA18E12334D2F7CD6D9C66ED
01B855340124A11F6E6CFA0FC36187A4B2ABCF0FDD853BE315718E0F3C5197E1
1866F0072558D2FB2AE1BA21A8D0C36FDA526F0FD52FE96BF999EEC29FF2984D
4E2B2F041CA994274183F24392B29D290BC45361C42EB36183FEC06BF5396717
75FCD24A137A8754A5FB971A4A6C802DA1F900B1834429EA473F0C657F7655A6
E29FF7869B27A36EC580828837802AB02E8F1D290126CE980E82193E3714D128
541D67CBBC74510D3C517B5552D59E44999518BA6FA5157A2CD650284B9E8A79
D08FAF52FCEEF9C6AAE6AE0A844A097E76E1672882FABD527B7CDD246BF7B553
CF02AD058962C065B6FBCD1820A238A2B24FBD77305FB9B219B70B9A8F0B1786
FEC4A00BA6B30D6A98569B967C5E710593488DC2F55B4E434255266C2F94F899
3BABD44D5BD839B8AF5BF28CAEDADC969F747982FE0A1D6F0D451D7DABB6336A
7B59551B89D35C673FA2226916443DDF53F6D18E008D0A15AF4E8AEDCDA65C49
17954EB5F1B57FBCF492EBC149B8CF199D34AA0887B982196354B66FA6DB513B
16057B606048B5F7FE870C048938FFCEF4F1D7BB5899907B11A1893315915911
9C854472A566C4E753870C78BC57E70643863D7211464C58ABA1A64C0E5E4246
8B4CCD085E5908FE64251C11170933B04AD925ADB58E5FFBB3D3DE6C41DBD778
9F34FBAE8C9D2AACAFBC4D0C2CFC9C636BAFFF6E7D50413939A5731C1C98AD27
F586242280ED7682C0C4DC8914E4595C2D0104B3BE8DE50991782497F015CDD8
3A3A8DF51BC6E536F57AD806DB7286A09C24C10FAC1BAC281C1FA3E01C7D96B3
AB5B5CF408DA048F328C1402ADF78C3081863B6A987F07364D9A7B152D5BA9DD
2BC1A42CC3222EACE6AE1022FC76BC05E913F51CA1F99198A39BE62AF7515467
F96B3CB2D70A55C08595940493CCE24C7BED76BA7B1857DA6B11B07C1D2F6FE4
DC193EEAC12464BFF94F7AE2DC51D044637B79FC33A2EADA6F6537556EFA90EB
21DAF9FCEE848CA22778F19278EE7DA598E7C4A64C2E3A40F56D3A069C96ABAF
5A3725D28EBE81D7945791E5325E036BF04915992C187BFCC1BEC95C188E34D7
890C8B897797C82C20973E9C29248026DB94F42C537FCC6123A8D53AD5B360DA
8369B96DD47846181C69A2FDE7C6AA319AFBB8C75E9A0AE8315A16C9133A3DD3
E14F7652FD58EE260960C6DCFBC6D4A7CF1716425E3E34A7985028576BA965A7
97BA05F4ECDA33486FDD97D8E6C8EDBF855C0A2F7604B75CB1D984A9C9FB75EB
F2473E2E457DCF4715BABC3DA69CBE704D64D894C7CB9E3A3F4819146D02D503
5CF869BC9C0CF1C6454BD6384E19E39C0DFCA3944B1F8147579D3765DB8C0AA8
213FF679FE3E6322D79D6CC55F2FDB37C9A66E360BD696F969E166E6A53CFAB7
C916C9702B65F488AB3132B48C1FFCC00CF8E318045D171F96675F5EE5785ADA
48E7D70A5BB9175672036EA149103783B3CDEBA248F64A3292CD0C677B94B6ED
E03960534EF60038B7CF7B101684C01F9B3873E3D4D11811689B5814E7A6D396
D7418B341E12BBA6B6974A6428F19A966DFBEC2559BB9B68A6277B6E48F45A20
C7D17F32D751F2ED0BB934661466F314580FF2EC7DFA31B82637309BB7C8F2C0
44989D94E992D05017A6EF690C600ADC55ED61A3266A68882A53D12BE2286BCD
CEBDF3F6E7F34A36359E942F60299B713E4D8EDF3B2C9A939D2A53EA338C89CE
9C20259CE1F3B8A486483FB09DA88BE585E497D70568A0E5B949C0A4EAC2C8FD
27AF10D687970E2205675F8BC0BB8467378254E78DEE2A2C8E4C379CF1881940
9CEA279AE115B59050DC83BEC3106011AF959290DC28913167EE124568F510BE
8AA825B8ED98C6C7F9F484E0A3D5C7C0D93F7E9F8BE834F74AE14DB8459D9974
F8B0FE2D00AAF5DAE93060E191ABB010173CC40B1D3F54B03AD79DDF04226164
EF9AB3E95AC4057DE7B7B3B577466744718A357C5B99023A3454AF80E81AF83F
7EC7982C2E307D16EA25C997478829F1F968453F6EB817571FE618129C483AD1
BF9677D95158F8DF2483C33A31A525D7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (report.dvi)
@start /Fa 134[47 45 65 45 52 32 40 41 1[50 50 55 80
25 2[30 50 45 30 45 50 45 1[50 8[72 3[70 55 2[66 1[72
87 61 2[38 72 75 64 66 1[70 1[72 6[30 2[50 2[50 1[50
50 50 1[30 1[30 2[40 40 27[55 12[{}46 99.6264 /CMTI12
rf /Fb 140[64 66 3[90 7[49 74 1[72 16[120 82[{}7 143.462
/CMBX12 rf /Fc 204[35 35 35 49[{}3 66.4176 /CMR8 rf /Fd
182[43 7[73 65[{}2 99.6264 /CMMI12 rf /Fe 138[51 51 51
51 2[51 51 51 51 2[51 51 51 1[51 51 51 1[51 13[51 15[51
51 51 1[51 9[51 51 51 51[{}23 99.6264 /CMTT12 rf /Ff
134[59 3[62 44 44 46 2[56 62 1[31 2[31 62 56 1[51 62
1[62 54 16[77 2[106 67 3[88 2[74 69[{}20 99.6264 /CMBX12
rf /Fg 2[0 131[69 4[65 73 57 1[61 34 1[69 78 74 81 1[61
2[65 59 73 62 86 4[26 3[65 1[63 6[34 1[44 1[79 1[55 2[34
34 3[34 2[56 14[65 23[44 19[61 3[{}31 99.6264 /Velthuis-dvng10
rf /Fh 132[49 43 51 51 70 51 54 38 38 38 1[54 49 54 81
27 51 30 27 54 49 30 43 54 43 54 49 3[27 1[27 60 2[100
73 73 70 54 72 76 66 1[73 89 61 76 50 35 1[77 1[66 75
70 69 73 1[46 4[27 49 49 49 49 49 49 49 49 49 49 1[27
33 27 31[54 12[{}65 99.6264 /CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 324 448 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end

324 448 a 324 448 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 324 448 a 0 TeXcolorgray 324 448
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 324 448 a 470 548 a Fh(4)32 b Fg(s)-61 b(\003mF)48
b(lMbAI)g(kA)g(ek)g(r)-61 b(\003KAK\027X)33 b Fh(AB)g
Fg(KF)-20 b(\\)-6 b(Ece)324 668 y(k)-61 b(\003)-20 b(\\)-6
b(d)426 671 y(\375)489 668 y Fh(A)33 b Fg(aOr)47 b(E/>yA)33
b Fh(3)f Fg(s)-61 b(\003mF)48 b(l)-61 b(\003kr)48 b(ek)g(cAp)g(KF)-20
b(\\)-6 b(Ece)324 789 y(k)-61 b(\003)-20 b(\\)-6 b(d)426
792 y(\375)492 789 y Fh(B)35 b Fg(aOr)51 b(E/>yA)35 b
Fh(5)g Fg(s)-61 b(\003mF)52 b(l)-61 b(\003kr)52 b(ek)g(cAp)g(KF)-20
b(\\)-6 b(Ece)52 b(jo)f(phl)-61 b(\003)52 b(KF)-20 b(\\)-6
b(cF)52 b(cAp)g(ko)35 b Fh(C)324 909 y Fg(kAVtA)47 b(ho)324
1029 y(KF)-20 b(\\)-6 b(Ece)16 b Fh(,)65 b Fg(r)-61 b(\003KAK\027X)16
b Fh(,)65 b Fg(lMbAI)16 b Fh(,)64 b Fg(cAp)16 b Fh(,)65
b Fg(k)-61 b(\003)-20 b(\\)-6 b(d)1941 1032 y(\375)1988
1029 y Fh(,)64 b Fg(E/>yA)16 b Fh(,)64 b Fg(kAVtA)p 470
1070 3505 4 v 520 1247 a Ff(English)808 b(Hindi)2856
1246 y(Meta)38 b(Language)p 470 1333 V 520 1418 a Fh(Construct)57
b(a)f(line)h(AB)f(of)520 1538 y(length)33 b(4)f(cm)1688
1418 y(4)60 b Fg(s)-61 b(\003mF)88 b(lMbAI)g(kA)f(ek)1688
1538 y(r)-61 b(\003KAK\027X)33 b Fh(AB)g Fg(KF)-20 b(\\)-6
b(Ece)2856 1418 y Fe(construct)2856 1538 y(lineSegment)54
b(AB)2856 1659 y(length)f(4)f(cm)520 1827 y Fh(With)31
b(A)g(as)h(cen)m(ter)g(and)f(ra-)520 1948 y(dius)i(3)g(cm,)g(dra)m(w)g
(an)g(arc)1688 1827 y Fg(k)-61 b(\003)-20 b(\\)-6 b(d)1790
1830 y(\375)1858 1827 y Fh(A)37 b Fg(aOr)54 b(E/>yA)37
b Fh(3)g Fg(s)-61 b(\003mF)1688 1948 y(l)g(\003kr)48
b(ek)g(cAp)g(KF)-20 b(\\)-6 b(Ece)2856 1827 y Fe(constrcut)54
b(arc)e(center)2856 1948 y(A)g(radius)h(3)e(cm)520 2116
y Fh(With)70 b(B)g(as)f(cen)m(ter)i(and)520 2236 y(radius)h(5)f(cm,)82
b(dra)m(w)72 b(an)520 2357 y(arc)22 b(cutting)g(the)g(previously)520
2477 y(dra)m(wn)33 b(arc)g(at)f(C)1688 2116 y Fg(k)-61
b(\003)-20 b(\\)-6 b(d)1790 2119 y(\375)1859 2116 y Fh(B)37
b Fg(aOr)56 b(E/>yA)38 b Fh(5)f Fg(s)-61 b(\003mF)1688
2236 y(l)g(\003kr)38 b(ek)g(cAp)g(KF)-20 b(\\)-6 b(Ece)38
b(jo)1688 2357 y(phl)-61 b(\003)82 b(KF)-20 b(\\)-6 b(cF)82
b(cAp)g(ko)56 b Fh(C)1688 2477 y Fg(kAVtA)48 b(ho)2856
2116 y Fe(construct)2856 2236 y(intersectingArc)2856
2357 y(center)53 b(C)f(radius)g(5)2856 2477 y(cm)g(cuts)g(arc)g(?)103
b(at)52 b(C)p 470 2564 V 470 2704 2987 4 v 520 2788 a
Ff(English)808 b(Meta)38 b(Language)413 b(Probabilit)m(y)p
470 2875 V 520 2959 a Fh(Construct)746 b Fe(construct)898
b Fh(0.98)520 3080 y(Dra)m(w)939 b Fe(construct)898 b
Fh(0.98)520 3200 y(Line)33 b(segmen)m(t)607 b Fe(lineSegment)796
b Fh(0.95)520 3320 y(Length)869 b Fe(length)1051 b Fh(0.07)520
3441 y(Arc)1014 b Fe(arc)1204 b Fh(0.99)520 3561 y(Cen)m(ter)885
b Fe(center)1051 b Fh(0.98)520 3682 y(Radius)874 b Fe(radius)1051
b Fh(0.97)520 3802 y(Cutting)838 b Fe(cut)1204 b Fh(0.80)p
470 3841 V 470 3982 V 520 4066 a Ff(Hindi)894 b(Meta)38
b(Language)413 b(Probabilit)m(y)p 470 4153 V 520 4238
a Fg(KF)-20 b(\\)-6 b(Ece)883 b Fe(construct)898 b Fh(0.99)520
4359 y Fg(r)-61 b(\003KAK\027X)810 b Fe(lineSegment)796
b Fh(0.99)520 4479 y Fg(lMbAI)895 b Fe(length)1051 b
Fh(0.98)520 4600 y Fg(cAp)1000 b Fe(arc)1204 b Fh(0.98)520
4721 y Fg(k)-61 b(\003)-20 b(\\)-6 b(d)622 4724 y(\375)1688
4721 y Fe(center)1051 b Fh(0.99)520 4842 y Fg(E/>yA)910
b Fe(radius)1051 b Fh(0.98)520 4962 y Fg(kAVtA)898 b
Fe(cut)1204 b Fh(0.80)p 470 5002 V 0 TeXcolorgray 1918
5251 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 470 1629 a
tx@Dict begin tx@NodeDict begin {14.22636 14.22636 } false /N@ABCD
10 {InitPnode } /NodeScale {} def NewNode end  end
 470 1629 a 470 1629 a
tx@Dict begin tx@NodeDict begin {71.13185 71.13185 } false /N@O 10
{InitPnode } /NodeScale {} def NewNode end  end
 470 1629
a 470 1629 a
tx@Dict begin tx@NodeDict begin {128.03734 14.22636 } false /N@C 10
{InitPnode } /NodeScale {} def NewNode end  end
 470 1629 a 470 1629 a
tx@Dict begin tx@NodeDict begin {71.13185 128.03734 } false /N@B 10
{InitPnode } /NodeScale {} def NewNode end  end
 470 1629 a 470 1629
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 40.0 40.0 0 0 /N@A
/N@O InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 470 1629 a 470 1629 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 4.96616 def /r 4.96616 def /h 4.58334 def /d 5.41664 def /flag true
def HPutAdjust LPutCoor end PutBegin  end
 470 1629 a 429 1659 a Fd(I)472
1674 y Fc(1)470 1629 y
tx@Dict begin PutEnd  end
 470 1629 a 470 1629 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.
 1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 moveto } def /ArrowB { } def  /NCLW CLW def tx@NodeDict begin 0.0
0.0 neg 30.0 30.0 0 0 /N@B /N@O InitNC { NCLine  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 470 1629
a 470 1629 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 4.96616 def /r 4.96616 def /h 4.58334 def /d 5.41664 def /flag true
def HPutAdjust LPutCoor end PutBegin  end
 470 1629 a 429 1659 a Fd(I)472 1674 y Fc(2)470
1629 y
tx@Dict begin PutEnd  end
 470 1629 a 470 1629 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 40.0 40.0 0 0 /N@C
/N@O InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 470 1629 a 470 1629 a
tx@Dict begin tx@NodeDict begin /t 0.5 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y exch def /X exch def /NAngle 0 def /NCLW 0 def
} ifelse /Sin NAngle sin def /Cos NAngle cos def /s 5.0 NCLW add def
/l 4.96616 def /r 4.96616 def /h 4.58334 def /d 5.41664 def /flag false
def HPutAdjust LPutCoor end PutBegin  end
 470
1629 a 429 1659 a Fd(I)472 1674 y Fc(3)470 1629 y
tx@Dict begin PutEnd  end
 470
1629 a 470 1629 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@O InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 470 1629 a 470 1629 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@B /N@O InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 470 1629 a 470
1629 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C /N@O InitNC
{ NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 470 1629 a 470 1629 a
tx@Dict begin { 71.13185 71.13185 } PutCoor PutBegin  end
 470 1629 a 433 1663 a Fd(A)470
1629 y
tx@Dict begin  PutEnd  end
 470 1629 a 324 1955 a Fb(References)p 0 TeXcolorgray
324 2174 a Fh([1])p 0 TeXcolorgray 49 w(Umair)44 b(Z)f(Ahmed,)48
b(Arpit)c(Kumar,)j(Mono)5 b(jit)44 b(Choudh)m(ury)-8
b(,)48 b(and)c(Kalik)-5 b(a)43 b(Bali.)476 2295 y(Can)i(mo)s(dern)g
(statistical)g(parsers)h(lead)f(to)f(b)s(etter)h(natural)g(language)f
(under-)476 2415 y(standing)h(for)f(education?)117 b(In)45
b Fa(Computational)g(Linguistics)h(and)g(Intel)5 b(ligent)476
2535 y(T)-7 b(ext)34 b(Pr)-5 b(o)g(c)g(essing)p Fh(,)31
b(pages)i(415{427.)e(Springer,)j(2012.)p 0 TeXcolorgray
324 2725 a([2])p 0 TeXcolorgray 49 w(Salman)j(Cheema,)i(Sumit)f(Gulw)m
(ani,)h(and)e(Joseph)h(LaViola.)56 b(Quic)m(kdra)m(w:)e(im-)476
2846 y(pro)m(ving)28 b(dra)m(wing)g(exp)s(erience)i(for)d(geometric)h
(diagrams.)36 b(In)28 b Fa(Pr)-5 b(o)g(c)g(e)g(e)g(dings)29
b(of)h(the)476 2966 y(2012)h(A)n(CM)i(annual)f(c)-5 b(onfer)g(enc)g(e)
31 b(on)h(Human)g(F)-7 b(actors)32 b(in)g(Computing)g(Systems)p
Fh(,)476 3086 y(pages)h(1037{1064.)d(A)m(CM,)k(2012.)p
0 TeXcolorgray 324 3276 a([3])p 0 TeXcolorgray 49 w(Sumit)40
b(Gulw)m(ani,)h(Vija)m(y)f(Anand)g(Korthik)-5 b(an)m(ti,)41
b(and)f(Ashish)h(Tiw)m(ari.)64 b(Syn)m(the-)476 3397
y(sizing)40 b(geometry)g(constructions.)64 b(In)40 b
Fa(A)n(CM)h(SIGPLAN)h(Notic)-5 b(es)p Fh(,)40 b(v)m(olume)h(46,)476
3517 y(pages)33 b(50{61.)e(A)m(CM,)j(2011.)p 0 TeXcolorgray
324 3707 a([4])p 0 TeXcolorgray 49 w(Shac)m(har)22 b(Itzhaky)-8
b(,)26 b(Sumit)d(Gulw)m(ani,)i(Neil)e(Immerman,)j(and)c(Mo)s(oly)h
(Sagiv.)k(Solv-)476 3827 y(ing)40 b(geometry)h(problems)g(using)g(a)f
(com)m(bination)h(of)f(sym)m(b)s(olic)i(and)e(n)m(umerical)476
3948 y(reasoning.)i(T)-8 b(ec)m(hnical)33 b(rep)s(ort,)e(T)-8
b(ec)m(hnical)34 b(rep)s(ort,)d(T)-8 b(el)33 b(Aviv)f(Univ)m(ersit)m(y)
-8 b(,)34 b(2012.)p 0 TeXcolorgray 324 4137 a([5])p 0
TeXcolorgray 49 w(P)m(ascal)28 b(Sc)m(hrec)m(k,)k(P)m(ascal)c(Mathis,)i
(and)e(Julien)h(Narb)s(oux.)36 b(Geometric)28 b(construc-)476
4258 y(tion)j(problem)h(solving)h(in)f(computer-aided)h(learning.)42
b(In)32 b Fa(T)-7 b(o)i(ols)32 b(with)i(A)n(rti\014cial)476
4378 y(Intel)5 b(ligenc)-5 b(e)33 b(\(ICT)-7 b(AI\),)34
b(2012)h(IEEE)g(24th)g(International)g(Confer)-5 b(enc)g(e)33
b(on)p Fh(,)g(v)m(ol-)476 4498 y(ume)g(1,)f(pages)h(1139{1144.)e(IEEE,)
j(2012.)p 0 TeXcolorgray 324 4688 a([6])p 0 TeXcolorgray
49 w(Luk)m(e)j(S)g(Zettlemo)m(y)m(er)h(and)f(Mic)m(hael)h(Collins.)56
b(Learning)37 b(to)f(map)g(sen)m(tences)k(to)476 4809
y(logical)29 b(form:)42 b(Structured)31 b(classi\014cation)g(with)g
(probabilistic)g(categorial)e(gram-)476 4929 y(mars.)43
b Fa(arXiv)35 b(pr)-5 b(eprint)35 b(arXiv:1207.1420)p
Fh(,)c(2012.)p 0 TeXcolorgray 1918 5251 a(2)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
